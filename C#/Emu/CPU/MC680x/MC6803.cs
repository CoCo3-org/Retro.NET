using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Emu.CPU.MC680x
{
    public class MC6803
    {
		//public MC10 mc10;

		public int idx = 0;
		// this.history = [];

		// Addressing modes
		public const int DIRECT = 1;
		public const int INDEX = 2;
		public const int EXTENDED = 3;
		public const int RELATIVE = 4;
		public const int IMMEDIATE = 5;
		public const int INHERENT = 6;

		public int INT_NONE = 0; // No interrupt required
		public int INT_IRQ = 1; // Standard IRQ interrupt
		public int INT_NMI = 2; // NMI interrupt
		public int WAI_ = 8; // set when WAI is waiting for an interrupt
		public int SLP = 0x10;
		public int IRQ_LINE = 0; // IRQ line number
		public int TIN_LINE = 1; // P20/Tin Input Capture line (eddge sense)
		public int CLEAR_LINE = 0; // clear (a fired, held or pulsed) line
		public int ASSERT_LINE = 1; // assert an interrupt immediately
		public int HOLD_LINE = 2; // hold interrupt line until enable is true
		public int PULSE_LINE = 3; // pulse interrupt line for one instruction

		public int TCSR_OLVL = 0x01;
		public int TCSR_IEDG = 0x02;
		public int TCSR_ETOI = 0x04;
		public int TCSR_EOCI = 0x08;
		public int TCSR_EICI = 0x10;
		public int TCSR_TOF = 0x20;
		public int TCSR_OCF = 0x40;
		public int TCSR_ICF = 0x80;

		public delegate int OpTableDelegate();
		public OpTableDelegate[] optable = new OpTableDelegate[256];

		public int cycleCount;

		// public MC6847 VDG;

		//// public var memoryBuffer:Int;
		public byte[] Memory; // = new byte[xxx];
	    //// public var port1Buffer:Int;
		public byte[] Port1;
		//// public var port2Buffer:Int;
		public byte[] Port2;

		public int memmode;
		public int printBuffer;
		public int[] irqState;
	    public int waiState;
		public int nmiState;
		public int extraCycles;
		public int irq2;
		public int pendingTCSR;

		public int F_CARRY;
		public int F_OVERFLOW;
		public int F_ZERO;
		public int F_SIGN;
		public int F_INTERRUPT;
		public int F_HALFCARRY;

		// public int REG_ACC; // Accumulator

		int _regA, _regB; int _regD;
		public int REG_A 
		{
			get { return _regA; }
			set
			{
				_regA = value; // JAR_NOTE do I need the mask?
				_regD = (_regD & 0xFF00) | _regA;
			}
		}
		public int REG_B 
		{
			get { return _regB; }
			set
			{
				_regB = value; // JAR_NOTE do I need the mask?
				_regD = (_regD & 0x00FF) | _regB << 8;
			}
		}
		public int REG_D 
		{
			get { return _regD; }
			set
			{
				_regD = value; // JAR_NOTE do I need the mask?
				_regA = _regD & 0x00FF;
				_regB = _regD >> 8; // JAR_NOTE do I need the mask?
			}
		}

		public int REG_SP; // Stack pointer
		public int REG_IP; // INDEX pointer
		public int REG_PC; // Program counter

		public byte[] ROM;

		public MC6803() 
		{
			// this.mc10 = mc;
			// this.ROM = Bytes.alloc(8 * 1024);
			this.Init_Rom();
			this.Init();
		}

		public void Print() 
		{
			string flags = "";
			if (this.F_CARRY != 0) flags += "C"; else flags += ".";
			if (this.F_OVERFLOW != 0) flags += "O"; else flags += ".";
			if (this.F_ZERO != 0) flags += "Z"; else flags += ".";
			if (this.F_SIGN != 0) flags += "S"; else flags += ".";
			if (this.F_INTERRUPT != 0) flags += "I"; else flags += ".";
			if (this.F_HALFCARRY != 0) flags += "H"; else flags += ".";

			Console.WriteLine("B={0} A={1} D={2} X={3} SP={4} PC={5} {6} OP={7} MNEM=?",
				this.REG_B.ToString("X2"),
				this.REG_A.ToString("X2"),
				this.REG_D.ToString("X4"),
				this.REG_IP.ToString("X4"),
				this.REG_SP.ToString("X4"),
				this.REG_PC.ToString("X4"),
				flags,
				this.FetchMemory(this.REG_PC).ToString("X2")
				//this.REG_A.ToString("X"),
				);
		}

		public void Init_Rom() 
		{
			this.ROM = new byte[]
			{
				0xF2, 0xBA, 0xF3, 0x35, 0xF2, 0xD5, 0x42, 0x15, 0xF6, 0x2A, 0xF5, 0x4D, 0xF0, 0xB9, 0xF5, 0xC9, 0xF6, 0x8C, 0xF6, 0x86, 0xF6, 0xD2, 0xEF, 0x5F, 0xEE, 0x82, 0xEC, 0xED, 0xEF, 0x1C, 0xEE, 0xA2, 0xEE, 0x8E, 0xEE, 0xAD, 0xEE, 0xC8, 0xEE, 0xCF, 0xFB, 0x9C, 0xFC, 0x11, 0xFB, 0xED, 0xEC, 0xDB, 0x79, 0xEF, 0x80, 0x79, 0xEF, 0x75, 0x7B, 0xF0, 0xF1, 0x7B, 0xF1, 0xC8, 0x7F, 0xF5, 0x56, 0x50,
				0xEA, 0x8E, 0x46, 0xEA, 0x8D, 0x46, 0x4F, 0xD2, 0x47, 0x4F, 0x54, 0xCF, 0x47, 0x4F, 0x53, 0x55, 0xC2, 0x52, 0x45, 0xCD, 0x49, 0xC6, 0x44, 0x41, 0x54, 0xC1, 0x50, 0x52, 0x49, 0x4E, 0xD4, 0x4F, 0xCE, 0x49, 0x4E, 0x50, 0x55, 0xD4, 0x45, 0x4E, 0xC4, 0x4E, 0x45, 0x58, 0xD4, 0x44, 0x49, 0xCD, 0x52, 0x45, 0x41, 0xC4, 0x4C, 0x45, 0xD4, 0x52, 0x55, 0xCE, 0x52, 0x45, 0x53, 0x54, 0x4F, 0x52,
				0xC5, 0x52, 0x45, 0x54, 0x55, 0x52, 0xCE, 0x53, 0x54, 0x4F, 0xD0, 0x50, 0x4F, 0x4B, 0xC5, 0x43, 0x4F, 0x4E, 0xD4, 0x4C, 0x49, 0x53, 0xD4, 0x43, 0x4C, 0x45, 0x41, 0xD2, 0x4E, 0x45, 0xD7, 0x43, 0x4C, 0x4F, 0x41, 0xC4, 0x43, 0x53, 0x41, 0x56, 0xC5, 0x4C, 0x4C, 0x49, 0x53, 0xD4, 0x4C, 0x50, 0x52, 0x49, 0x4E, 0xD4, 0x53, 0x45, 0xD4, 0x52, 0x45, 0x53, 0x45, 0xD4, 0x43, 0x4C, 0xD3, 0x53,
				0x4F, 0x55, 0x4E, 0xC4, 0x45, 0x58, 0x45, 0xC3, 0x53, 0x4B, 0x49, 0x50, 0xC6, 0x54, 0x41, 0x42, 0xA8, 0x54, 0xCF, 0x54, 0x48, 0x45, 0xCE, 0x4E, 0x4F, 0xD4, 0x53, 0x54, 0x45, 0xD0, 0x4F, 0x46, 0xC6, 0xAB, 0xAD, 0xAA, 0xAF, 0xDE, 0x41, 0x4E, 0xC4, 0x4F, 0xD2, 0xBE, 0xBD, 0xBC, 0x53, 0x47, 0xCE, 0x49, 0x4E, 0xD4, 0x41, 0x42, 0xD3, 0x55, 0x53, 0xD2, 0x52, 0x4E, 0xC4, 0x53, 0x51, 0xD2,
				0x4C, 0x4F, 0xC7, 0x45, 0x58, 0xD0, 0x53, 0x49, 0xCE, 0x43, 0x4F, 0xD3, 0x54, 0x41, 0xCE, 0x50, 0x45, 0x45, 0xCB, 0x4C, 0x45, 0xCE, 0x53, 0x54, 0x52, 0xA4, 0x56, 0x41, 0xCC, 0x41, 0x53, 0xC3, 0x43, 0x48, 0x52, 0xA4, 0x4C, 0x45, 0x46, 0x54, 0xA4, 0x52, 0x49, 0x47, 0x48, 0x54, 0xA4, 0x4D, 0x49, 0x44, 0xA4, 0x50, 0x4F, 0x49, 0x4E, 0xD4, 0x56, 0x41, 0x52, 0x50, 0x54, 0xD2, 0x49, 0x4E,
				0x4B, 0x45, 0x59, 0xA4, 0x4D, 0x45, 0xCD, 0x00, 0xE4, 0xC4, 0xE6, 0x1A, 0xE6, 0x04, 0xE6, 0x85, 0xE6, 0x72, 0xE6, 0x51, 0xE7, 0x1F, 0xE6, 0x92, 0xE7, 0xDE, 0xE5, 0x7F, 0xE8, 0xBB, 0xEB, 0x12, 0xE8, 0x0E, 0xE6, 0xD3, 0xE5, 0xFA, 0xE5, 0x60, 0xE6, 0x31, 0xE5, 0x7E, 0xEF, 0x66, 0xE5, 0xA6, 0xE4, 0x0D, 0xE5, 0xB8, 0xE3, 0xCD, 0xFD, 0x5C, 0xFC, 0x3B, 0xE4, 0x0B, 0xE7, 0x1C, 0xFB, 0x25,
				0xFB, 0x55, 0xFB, 0xBF, 0xFF, 0xA5, 0xFC, 0x04, 0xFE, 0x2F, 0x4E, 0x46, 0x53, 0x4E, 0x52, 0x47, 0x4F, 0x44, 0x46, 0x43, 0x4F, 0x56, 0x4F, 0x4D, 0x55, 0x4C, 0x42, 0x53, 0x44, 0x44, 0x2F, 0x30, 0x49, 0x44, 0x54, 0x4D, 0x4F, 0x53, 0x4C, 0x53, 0x53, 0x54, 0x43, 0x4E, 0x49, 0x4F, 0x46, 0x4D, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x00, 0x20, 0x49, 0x4E, 0x20, 0x00, 0x0D, 0x4F, 0x4B, 0x0D,
				0x00, 0x0D, 0x42, 0x52, 0x45, 0x41, 0x4B, 0x00, 0x81, 0x3A, 0x24, 0x0B, 0x81, 0x20, 0x26, 0x03, 0x7E, 0x00, 0xEB, 0x80, 0x30, 0x80, 0xD0, 0x39, 0x30, 0xC6, 0x04, 0x3A, 0xC6, 0x12, 0xDF, 0x89, 0xA6, 0x00, 0x80, 0x80, 0x26, 0x14, 0xEE, 0x01, 0xDF, 0x8B, 0xDE, 0xB5, 0x27, 0x08, 0x9C, 0x8B, 0x27, 0x08, 0x8D, 0x3B, 0x20, 0xE6, 0xDE, 0x8B, 0xDF, 0xB5, 0xDE, 0x89, 0x4D, 0x39, 0x8D, 0x1E,
				0x07, 0x36, 0x9F, 0x91, 0x0F, 0x9E, 0xBB, 0xDE, 0xBD, 0x08, 0x09, 0xA6, 0x00, 0x36, 0x9C, 0xC1, 0x26, 0xF8, 0x31, 0x9F, 0xBF, 0x9E, 0x91, 0x32, 0x06, 0x39, 0x4F, 0x58, 0xD3, 0x99, 0xC3, 0x00, 0x3A, 0x25, 0x13, 0x9F, 0x91, 0x93, 0x91, 0x24, 0x0D, 0xD3, 0x91, 0x39, 0x4F, 0xDF, 0x89, 0xD3, 0x89, 0xDD, 0x8B, 0xDE, 0x8B, 0x39, 0xC6, 0x0C, 0xBD, 0x42, 0x97, 0xBD, 0x42, 0x9A, 0xBD, 0xFC,
				0x86, 0xB6, 0x42, 0x6E, 0x27, 0x03, 0xBD, 0xE3, 0xCF, 0xBD, 0xE3, 0xEE, 0x7F, 0x00, 0xE8, 0xBD, 0xE7, 0x6A, 0xBD, 0xE7, 0xBC, 0xCE, 0xE1, 0x8A, 0x3A, 0xA6, 0x00, 0xBD, 0xE7, 0xBE, 0xA6, 0x01, 0xBD, 0xE7, 0xBE, 0xCE, 0xE1, 0xAF, 0xBD, 0xE7, 0xA8, 0xDE, 0xE2, 0x08, 0x27, 0x03, 0xBD, 0xF4, 0x12, 0xBD, 0xE7, 0x6A, 0xCE, 0xE1, 0xBC, 0xBD, 0xE7, 0xA8, 0xCE, 0xFF, 0xFF, 0xDF, 0xE2, 0xBD,
				0xFA, 0xA4, 0x25, 0xF6, 0xDF, 0xF4, 0xBD, 0x00, 0xEB, 0x27, 0xEF, 0x25, 0x06, 0xBD, 0xE3, 0x11, 0x7E, 0xE5, 0x3D, 0xBD, 0xE6, 0xB2, 0xDE, 0xA5, 0xFF, 0x42, 0xB0, 0xBD, 0xE3, 0x11, 0xD7, 0x82, 0xBD, 0xE3, 0xB9, 0x25, 0x1C, 0xDC, 0xC1, 0xA3, 0x00, 0xD3, 0x95, 0xDD, 0x95, 0x07, 0x36, 0x9F, 0x91, 0x0F, 0xAE, 0x00, 0x34, 0x32, 0xA7, 0x00, 0x08, 0x9C, 0x95, 0x26, 0xF8, 0x9E, 0x91, 0x32,
				0x06, 0xB6, 0x42, 0xB2, 0x27, 0x25, 0xDC, 0x95, 0xDD, 0xBD, 0xDB, 0x82, 0x89, 0x00, 0xDD, 0xBB, 0xBD, 0xE1, 0xFE, 0x07, 0x36, 0x9F, 0x91, 0x0F, 0x8E, 0x42, 0xAD, 0x32, 0xA7, 0x00, 0x08, 0x9C, 0xBF, 0x26, 0xF8, 0x9E, 0x91, 0x32, 0x06, 0xDE, 0xBB, 0xDF, 0x95, 0xBD, 0xE3, 0xD9, 0x8D, 0x03, 0x7E, 0xE2, 0x7A, 0xDE, 0x93, 0xEC, 0x00, 0x26, 0x01, 0x39, 0x3C, 0xC6, 0x04, 0x3A, 0x08, 0xA6,
				0x00, 0x26, 0xFB, 0x08, 0x3C, 0x30, 0xEC, 0x00, 0xEE, 0x02, 0xED, 0x00, 0x38, 0x31, 0x31, 0x20, 0xE4, 0x7F, 0x00, 0x85, 0xDE, 0xF4, 0x09, 0xDF, 0xF4, 0xCE, 0x42, 0xB1, 0xDF, 0xDE, 0x9F, 0x91, 0x07, 0x97, 0x87, 0x01, 0x0F, 0x9E, 0xF4, 0x33, 0xC1, 0x20, 0x27, 0x38, 0xD7, 0x81, 0xC1, 0x22, 0x27, 0x5B, 0x96, 0x85, 0x26, 0x2E, 0xC1, 0x3F, 0x26, 0x04, 0xC6, 0x86, 0x20, 0x26, 0xC1, 0x30,
				0x25, 0x04, 0xC1, 0x3C, 0x25, 0x1E, 0x5D, 0x2B, 0x19, 0xCE, 0xE0, 0x44, 0x9E, 0xF4, 0x5F, 0x08, 0x32, 0x81, 0x20, 0x27, 0xFB, 0xA0, 0x00, 0x27, 0xF6, 0x81, 0x80, 0x26, 0x35, 0xCA, 0x80, 0xDE, 0xDE, 0x8C, 0xC6, 0x21, 0x9F, 0xF4, 0x9E, 0x91, 0x96, 0x87, 0x06, 0x08, 0xDF, 0xDE, 0xE7, 0x00, 0x27, 0x38, 0xC0, 0x3A, 0x27, 0x04, 0xC1, 0x4B, 0x26, 0x02, 0xD7, 0x85, 0xC0, 0x49, 0x26, 0xA3,
				0xD7, 0x81, 0x0F, 0x9E, 0xF4, 0x33, 0x5D, 0x27, 0xDB, 0xD1, 0x81, 0x27, 0xD7, 0x08, 0xE7, 0x00, 0x20, 0xF3, 0x9E, 0xF4, 0x5C, 0xA6, 0x00, 0x08, 0x2A, 0xFB, 0xA6, 0x00, 0x26, 0xB2, 0x9F, 0xF4, 0x9E, 0x91, 0xBD, 0x42, 0xA3, 0x9E, 0xF4, 0x33, 0x20, 0xB5, 0xE7, 0x01, 0xE7, 0x02, 0xDC, 0xDE, 0x83, 0x42, 0xAD, 0xCE, 0x42, 0xB1, 0xDF, 0xF4, 0x39, 0xDE, 0x93, 0xEC, 0x00, 0x27, 0x0A, 0xDC,
				0xA5, 0xA3, 0x02, 0x23, 0x05, 0xEE, 0x00, 0x20, 0xF2, 0x0D, 0xDF, 0xC1, 0x39, 0x26, 0xFB, 0xDE, 0x93, 0x6F, 0x00, 0x08, 0x6F, 0x00, 0x08, 0xDF, 0x95, 0xDE, 0x93, 0x09, 0xDF, 0xF4, 0xBD, 0x42, 0x8E, 0xDE, 0xA1, 0xDF, 0x9D, 0xBD, 0xE5, 0x60, 0xDE, 0x95, 0xDF, 0x97, 0xDF, 0x99, 0xCE, 0x42, 0x41, 0xFF, 0x42, 0x3D, 0x38, 0x9E, 0x9B, 0x4F, 0x36, 0x97, 0xA7, 0x97, 0xA8, 0x97, 0x86, 0xB7,
				0x42, 0x6E, 0x6E, 0x00, 0xC6, 0xFE, 0xD7, 0xE8, 0x7E, 0x00, 0xF3, 0x8D, 0xF7, 0x07, 0x36, 0x8D, 0xF7, 0xBD, 0xE6, 0xB2, 0x8D, 0xA3, 0x32, 0x06, 0x3C, 0x27, 0x16, 0xBD, 0x00, 0xF3, 0x27, 0x16, 0x81, 0xA8, 0x26, 0x0A, 0xBD, 0x00, 0xEB, 0x27, 0x08, 0xBD, 0xE6, 0xB2, 0x27, 0x08, 0x7E, 0xEA, 0x3C, 0xCE, 0xFF, 0xFF, 0xDF, 0xA5, 0x38, 0x31, 0x31, 0xBD, 0xE7, 0x6A, 0xBD, 0xE5, 0x66, 0xEC,
				0x00, 0x26, 0x06, 0x7F, 0x00, 0xE8, 0x7E, 0xE2, 0x71, 0xEC, 0x02, 0x93, 0xA5, 0x22, 0xF4, 0xEC, 0x02, 0x3C, 0xBD, 0xF4, 0x19, 0x38, 0x08, 0x08, 0x08, 0x08, 0xDF, 0x89, 0x7F, 0x42, 0x84, 0x86, 0x20, 0x8C, 0x86, 0x21, 0xDE, 0x89, 0x84, 0x7F, 0xBD, 0xE7, 0xBE, 0xA6, 0x00, 0x08, 0x4D, 0x27, 0xC8, 0xF6, 0x42, 0x84, 0x81, 0x22, 0x26, 0x05, 0xC8, 0x01, 0xF7, 0x42, 0x84, 0x81, 0x3A, 0x26,
				0x09, 0xC5, 0x01, 0x26, 0x05, 0xC4, 0xFD, 0xF7, 0x42, 0x84, 0x4D, 0x2A, 0xDB, 0x5D, 0x26, 0xD8, 0x81, 0x85, 0x26, 0x02, 0xCA, 0x02, 0x81, 0x83, 0x26, 0x02, 0xCA, 0x04, 0xF7, 0x42, 0x84, 0xBD, 0x42, 0xA6, 0x81, 0xC8, 0x22, 0xBC, 0x8D, 0x0A, 0xA6, 0x00, 0x2B, 0xB8, 0x08, 0xBD, 0xE7, 0xBE, 0x20, 0xF6, 0x80, 0x7F, 0xDF, 0x89, 0xCE, 0xE0, 0x45, 0x4A, 0x26, 0x01, 0x39, 0x6D, 0x00, 0x08,
				0x2A, 0xFB, 0x20, 0xF5, 0x86, 0x80, 0x97, 0x86, 0xBD, 0xE6, 0xD3, 0xBD, 0xE1, 0xD8, 0x38, 0x26, 0x04, 0xDE, 0x89, 0x3A, 0x35, 0xC6, 0x09, 0xBD, 0xE2, 0x1A, 0xBD, 0xE6, 0x56, 0x3C, 0xDE, 0xE2, 0x3C, 0xC6, 0xA2, 0xBD, 0xEA, 0x31, 0xBD, 0xE9, 0x0E, 0xBD, 0xE9, 0x0C, 0xD6, 0xCE, 0xCA, 0x7F, 0xD4, 0xCA, 0xD7, 0xCA, 0xCE, 0xE4, 0xFA, 0x7E, 0xE9, 0xA4, 0xCE, 0xF0, 0x8B, 0xBD, 0xF2, 0x51,
				0xBD, 0x00, 0xF3, 0x81, 0xA5, 0x26, 0x06, 0xBD, 0x00, 0xEB, 0xBD, 0xE9, 0x0C, 0xBD, 0xF2, 0xAD, 0xBD, 0xE9, 0xA2, 0xDE, 0xB5, 0x3C, 0x86, 0x80, 0x36, 0x8D, 0x4B, 0xDE, 0xF4, 0xDF, 0xA9, 0xA6, 0x00, 0x27, 0x07, 0x81, 0x3A, 0x27, 0x16, 0x7E, 0xEA, 0x3C, 0x08, 0xA6, 0x00, 0x08, 0xAA, 0x00, 0xB7, 0x42, 0x83, 0x27, 0x54, 0x08, 0xEC, 0x00, 0xDD, 0xE2, 0x08, 0xDF, 0xF4, 0xBD, 0x00, 0xEB,
				0x8D, 0x02, 0x20, 0xD5, 0x27, 0x71, 0xBD, 0x42, 0xA0, 0x4D, 0x2B, 0x03, 0x7E, 0xE6, 0xD3, 0x81, 0xA0, 0x22, 0xD4, 0x48, 0x16, 0xCE, 0xE1, 0x48, 0x3A, 0xEE, 0x00, 0xBD, 0x00, 0xEB, 0x6E, 0x00, 0xDE, 0x93, 0x09, 0xDF, 0xAD, 0x39, 0xBD, 0xF8, 0x79, 0x27, 0x0B, 0x81, 0x03, 0x27, 0x0F, 0x81, 0x13, 0x27, 0x04, 0xB7, 0x42, 0x7F, 0x39, 0xBD, 0xF8, 0x83, 0x27, 0xFB, 0x20, 0xED, 0x0D, 0x26,
				0x36, 0xDE, 0xF4, 0xDF, 0xA9, 0x76, 0x42, 0x83, 0x38, 0xDE, 0xE2, 0x08, 0x27, 0x07, 0x09, 0xDF, 0xA3, 0xDE, 0xA9, 0xDF, 0xA7, 0x7F, 0x00, 0xE8, 0xCE, 0xE1, 0xC0, 0x7D, 0x42, 0x83, 0x2A, 0x03, 0x7E, 0xE2, 0x66, 0x7E, 0xE2, 0x71, 0x26, 0x0F, 0xC6, 0x20, 0xDE, 0xA7, 0x26, 0x03, 0x7E, 0xE2, 0x38, 0xDF, 0xF4, 0xDE, 0xA3, 0xDF, 0xE2, 0x39, 0x27, 0x3A, 0xBD, 0xEB, 0xBD, 0x37, 0x36, 0xDE,
				0xA1, 0xDF, 0xCC, 0xBD, 0x00, 0xF3, 0x27, 0x12, 0xBD, 0xEA, 0x2F, 0xBD, 0xEF, 0x4C, 0xDE, 0xCC, 0x09, 0xDF, 0xCC, 0xFC, 0x42, 0x50, 0x93, 0xCC, 0x25, 0x1D, 0xDC, 0xCC, 0x37, 0x36, 0x30, 0xA3, 0x02, 0x25, 0x14, 0xED, 0x02, 0x83, 0x00, 0x3A, 0x25, 0x0D, 0x93, 0x95, 0x25, 0x09, 0x38, 0xDF, 0xA1, 0x38, 0xDF, 0x9B, 0x7E, 0xE3, 0xDE, 0x7E, 0xE2, 0x36, 0x26, 0x03, 0x7E, 0xE3, 0xD9, 0xBD,
				0xE3, 0xDE, 0x20, 0x0E, 0xC6, 0x03, 0xBD, 0xE2, 0x1A, 0xDE, 0xF4, 0x3C, 0xDE, 0xE2, 0x3C, 0x86, 0x82, 0x36, 0xBD, 0x00, 0xF3, 0x8D, 0x03, 0x7E, 0xE5, 0x19, 0xBD, 0xE6, 0xB2, 0x8D, 0x3A, 0x08, 0xDC, 0xA5, 0x93, 0xE2, 0x22, 0x02, 0xDE, 0x93, 0xBD, 0xE3, 0xBB, 0x25, 0x15, 0x09, 0xDF, 0xF4, 0x39, 0x26, 0xFD, 0x86, 0xFF, 0x97, 0xB5, 0xBD, 0xE1, 0xD8, 0x35, 0x81, 0x02, 0x27, 0x0B, 0xC6,
				0x04, 0x8C, 0xC6, 0x0E, 0x7E, 0xE2, 0x38, 0x7E, 0xEA, 0x3C, 0x32, 0x38, 0xDF, 0xE2, 0x38, 0xDF, 0xF4, 0x8D, 0x03, 0xDF, 0xF4, 0x39, 0xC6, 0x3A, 0x86, 0x5F, 0xD7, 0x80, 0x5F, 0xDE, 0xF4, 0x17, 0xD6, 0x80, 0x97, 0x80, 0xA6, 0x00, 0x27, 0xED, 0x11, 0x27, 0xEA, 0x08, 0x81, 0x22, 0x27, 0xEF, 0x20, 0xF2, 0xBD, 0xE9, 0x0C, 0xBD, 0x00, 0xF3, 0x81, 0x81, 0x27, 0x05, 0xC6, 0xA3, 0xBD, 0xEA,
				0x31, 0x96, 0xC9, 0x26, 0x05, 0x8D, 0xD2, 0xDF, 0xF4, 0x39, 0xBD, 0x00, 0xF3, 0x25, 0x8B, 0x7E, 0xE5, 0x44, 0xBD, 0xEF, 0x0D, 0x36, 0x81, 0x82, 0x27, 0x04, 0x81, 0x81, 0x26, 0xA9, 0x7A, 0x00, 0xCD, 0x26, 0x04, 0x32, 0x7E, 0xE5, 0x46, 0xBD, 0x00, 0xEB, 0x8D, 0x06, 0x81, 0x2C, 0x27, 0xEE, 0x31, 0x39, 0xCE, 0x00, 0x00, 0xDF, 0xA5, 0x24, 0xF8, 0x80, 0x30, 0x97, 0x80, 0xDC, 0xA5, 0x81,
				0x18, 0x22, 0xD9, 0x05, 0x05, 0xD3, 0xA5, 0x05, 0xDB, 0x80, 0x89, 0x00, 0xDD, 0xA5, 0xBD, 0x00, 0xEB, 0x20, 0xE4, 0xBD, 0xEB, 0x1B, 0xDF, 0xB5, 0xC6, 0xAF, 0xBD, 0xEA, 0x31, 0x96, 0x84, 0x36, 0xBD, 0xE9, 0x1A, 0x32, 0x46, 0xBD, 0xE9, 0x10, 0x27, 0x2F, 0xDE, 0xCC, 0xDC, 0x9B, 0xA3, 0x02, 0x24, 0x13, 0xDC, 0x95, 0x93, 0xCC, 0x22, 0x0D, 0xE6, 0x00, 0xBD, 0xEC, 0xFC, 0xDE, 0xC7, 0xBD,
				0xEE, 0x38, 0xCE, 0x00, 0xD0, 0xDF, 0xC7, 0xBD, 0xEE, 0x70, 0xDE, 0xC7, 0xA6, 0x00, 0x36, 0xEC, 0x02, 0xDE, 0xB5, 0xED, 0x02, 0x32, 0xA7, 0x00, 0x39, 0x7E, 0xF2, 0x70, 0xBD, 0xE4, 0x04, 0x8D, 0x04, 0x7F, 0x00, 0xE8, 0x39, 0x27, 0x3F, 0x81, 0x40, 0x26, 0x0B, 0xBD, 0xFC, 0x29, 0xBD, 0x00, 0xF3, 0x27, 0x33, 0xBD, 0xEA, 0x2F, 0x27, 0x3B, 0x81, 0xA1, 0x27, 0x50, 0x81, 0x2C, 0x27, 0x34,
				0x81, 0x3B, 0x27, 0x5E, 0xBD, 0xE9, 0x1A, 0x96, 0x84, 0x36, 0x26, 0x06, 0xBD, 0xF4, 0x26, 0xBD, 0xED, 0x05, 0x8D, 0x57, 0x33, 0x5D, 0x26, 0x09, 0xBD, 0x00, 0xF3, 0x81, 0x2C, 0x27, 0x15, 0x8D, 0x58, 0xBD, 0x00, 0xF3, 0x26, 0xD2, 0x86, 0x0D, 0x20, 0x54, 0xBD, 0xFA, 0x7B, 0x27, 0xF7, 0x96, 0xE6, 0x26, 0xF3, 0x39, 0xBD, 0xFA, 0x7B, 0x27, 0x0A, 0xD6, 0xE6, 0xD1, 0xE5, 0x25, 0x06, 0x8D,
				0xE5, 0x20, 0x1F, 0xD6, 0xE6, 0xD0, 0xE4, 0x24, 0xFC, 0x50, 0x20, 0x11, 0xBD, 0xEF, 0x0A, 0x81, 0x29, 0x27, 0x03, 0x7E, 0xEA, 0x3C, 0xBD, 0xFA, 0x7B, 0xD0, 0xE6, 0x23, 0x05, 0x8D, 0x1A, 0x5A, 0x26, 0xFB, 0xBD, 0x00, 0xEB, 0x7E, 0xE7, 0x36, 0xBD, 0xED, 0x06, 0xBD, 0xEE, 0x56, 0x5C, 0x5A, 0x27, 0xC1, 0xA6, 0x00, 0x08, 0x8D, 0x07, 0x20, 0xF6, 0x86, 0x20, 0x8C, 0x86, 0x3F, 0x7E, 0xF9,
				0xC6, 0x3F, 0x52, 0x45, 0x44, 0x4F, 0x0D, 0x00, 0x96, 0x87, 0x27, 0x07, 0xDE, 0xAB, 0xDF, 0xE2, 0x7E, 0xEA, 0x3C, 0xCE, 0xE7, 0xC0, 0xBD, 0xE7, 0xA8, 0xDE, 0xA9, 0xDF, 0xF4, 0x39, 0xC6, 0x16, 0xDE, 0xE2, 0x08, 0x26, 0x03, 0x7E, 0xE2, 0x38, 0x81, 0x22, 0x26, 0x0B, 0xBD, 0xEA, 0x07, 0xC6, 0x3B, 0xBD, 0xEA, 0x31, 0xBD, 0xE7, 0xAB, 0x8D, 0x06, 0xC6, 0x2C, 0xE7, 0x00, 0x20, 0x12, 0xBD,
				0xE7, 0xBC, 0xBD, 0xE7, 0xB9, 0xBD, 0xFA, 0xA4, 0x24, 0xD3, 0x38, 0x7E, 0xE5, 0x85, 0xDE, 0xAD, 0x86, 0x4F, 0x97, 0x87, 0xDF, 0xAF, 0xBD, 0xEB, 0x1B, 0xDF, 0xB5, 0xDE, 0xF4, 0xDF, 0xA5, 0xDE, 0xAF, 0xA6, 0x00, 0x26, 0x09, 0x96, 0x87, 0x26, 0x4E, 0xBD, 0xE7, 0xBC, 0x8D, 0xD1, 0xDF, 0xF4, 0xBD, 0x00, 0xEB, 0xD6, 0x84, 0x27, 0x1C, 0xDE, 0xF4, 0x97, 0x80, 0x81, 0x22, 0x27, 0x07, 0x09,
				0x86, 0x3A, 0x97, 0x80, 0x86, 0x2C, 0x97, 0x81, 0xBD, 0xED, 0x0C, 0xBD, 0xEF, 0x3E, 0xBD, 0xE6, 0xEA, 0x20, 0x06, 0xBD, 0xF3, 0x59, 0xBD, 0xF2, 0x70, 0xBD, 0x00, 0xF3, 0x27, 0x07, 0x81, 0x2C, 0x27, 0x03, 0x7E, 0xE7, 0xC8, 0xDE, 0xF4, 0xDF, 0xAF, 0xDE, 0xA5, 0xDF, 0xF4, 0xBD, 0x00, 0xF3, 0x27, 0x25, 0xBD, 0xEA, 0x2F, 0x20, 0x9F, 0xDF, 0xF4, 0xBD, 0xE6, 0x56, 0x08, 0x4D, 0x26, 0x0F,
				0xC6, 0x06, 0xA6, 0x00, 0xAA, 0x01, 0x27, 0x46, 0xEC, 0x02, 0xDD, 0xAB, 0xC6, 0x04, 0x3A, 0xA6, 0x00, 0x81, 0x85, 0x26, 0xE2, 0x20, 0x97, 0xDE, 0xAF, 0xD6, 0x87, 0x27, 0x03, 0x7E, 0xE5, 0x63, 0xA6, 0x00, 0x27, 0x06, 0xCE, 0xE8, 0xAA, 0x7E, 0xE7, 0xA8, 0x39, 0x3F, 0x45, 0x58, 0x54, 0x52, 0x41, 0x20, 0x49, 0x47, 0x4E, 0x4F, 0x52, 0x45, 0x44, 0x0D, 0x00, 0x26, 0x05, 0xCE, 0x00, 0x00,
				0x20, 0x03, 0xBD, 0xEB, 0x1B, 0xDF, 0xB5, 0xBD, 0xE1, 0xD8, 0x27, 0x04, 0xC6, 0x00, 0x20, 0x47, 0x35, 0x08, 0x08, 0x08, 0xBD, 0xF2, 0x51, 0x30, 0xA6, 0x08, 0x97, 0xCE, 0xDE, 0xB5, 0xBD, 0xEF, 0x7D, 0xBD, 0xF2, 0x70, 0x30, 0xC6, 0x09, 0x3A, 0xBD, 0xF2, 0xD9, 0x30, 0xE0, 0x08, 0x27, 0x0C, 0xEE, 0x0E, 0xDF, 0xE2, 0x30, 0xEE, 0x10, 0xDF, 0xF4, 0x7E, 0xE5, 0x19, 0xC6, 0x12, 0x3A, 0x35,
				0xBD, 0x00, 0xF3, 0x81, 0x2C, 0x26, 0xF2, 0xBD, 0x00, 0xEB, 0x8D, 0xB6, 0x8D, 0x0C, 0x6D, 0x0D, 0x76, 0x00, 0x84, 0x28, 0x95, 0xC6, 0x18, 0x7E, 0xE2, 0x38, 0xDE, 0xF4, 0x09, 0xDF, 0xF4, 0x4F, 0xC6, 0x37, 0x36, 0xC6, 0x01, 0xBD, 0xE2, 0x1A, 0xBD, 0xE9, 0xE5, 0x7F, 0x00, 0xB9, 0xBD, 0x00, 0xF3, 0x80, 0xAE, 0x25, 0x14, 0x81, 0x03, 0x24, 0x10, 0x81, 0x01, 0x49, 0x98, 0xB9, 0x91, 0xB9,
				0x25, 0x59, 0x97, 0xB9, 0xBD, 0x00, 0xEB, 0x20, 0xE8, 0xD6, 0xB9, 0x26, 0x2B, 0x24, 0x66, 0x8B, 0x07, 0x24, 0x62, 0x99, 0x84, 0x26, 0x03, 0x7E, 0xEE, 0x06, 0x89, 0xFF, 0x16, 0x48, 0x1B, 0x16, 0xCE, 0xE0, 0x30, 0x3A, 0x32, 0xA1, 0x00, 0x24, 0x53, 0x8D, 0xA3, 0x36, 0x8D, 0x23, 0xDE, 0xB7, 0x32, 0x26, 0x18, 0x4D, 0x27, 0x6C, 0x20, 0x4D, 0x78, 0x00, 0x84, 0x59, 0xDE, 0xF4, 0x09, 0xDF,
				0xF4, 0xCE, 0xE9, 0x88, 0xD7, 0xB9, 0x20, 0xDC, 0x64, 0xEA, 0xAE, 0xA1, 0x00, 0x24, 0x36, 0x20, 0xDA, 0xEC, 0x01, 0x37, 0x36, 0x8D, 0x07, 0xD6, 0xB9, 0x20, 0x86, 0x7E, 0xEA, 0x3C, 0xD6, 0xCE, 0xA6, 0x00, 0x38, 0x37, 0xD6, 0xCD, 0x37, 0xD6, 0xCC, 0x37, 0xD6, 0xCB, 0x37, 0xD6, 0xCA, 0x37, 0xD6, 0xC9, 0x37, 0x6E, 0x00, 0xCE, 0x00, 0x00, 0x32, 0x4D, 0x27, 0x26, 0x81, 0x64, 0x27, 0x03,
				0xBD, 0xE9, 0x0E, 0xDF, 0xB7, 0x33, 0x81, 0x5A, 0x27, 0x1A, 0x81, 0x7D, 0x27, 0x16, 0x54, 0xD7, 0x88, 0x32, 0x33, 0xDD, 0xD6, 0x38, 0xDF, 0xD8, 0x33, 0xD7, 0xDA, 0x33, 0xD7, 0xDB, 0xD8, 0xCE, 0xD7, 0xDC, 0xD6, 0xC9, 0x39, 0xBD, 0x42, 0x94, 0x7F, 0x00, 0x84, 0x8D, 0x4C, 0x24, 0x03, 0x7E, 0xF3, 0x59, 0xBD, 0xEB, 0x76, 0x24, 0x52, 0x81, 0x2E, 0x27, 0xF4, 0x81, 0xA8, 0x27, 0x42, 0x81,
				0xA7, 0x27, 0xE2, 0x81, 0x22, 0x26, 0x08, 0xDE, 0xF4, 0xBD, 0xED, 0x06, 0x7E, 0xEF, 0x3E, 0x81, 0xA4, 0x26, 0x0D, 0x86, 0x5A, 0xBD, 0xE9, 0x21, 0xBD, 0xEB, 0xC7, 0x43, 0x53, 0x7E, 0xEC, 0xE3, 0x80, 0xB1, 0x24, 0x31, 0x8D, 0x06, 0xBD, 0xE9, 0x1A, 0xC6, 0x29, 0x8C, 0xC6, 0x28, 0x8C, 0xC6, 0x2C, 0x3C, 0xDE, 0xF4, 0xE1, 0x00, 0x38, 0x26, 0x03, 0x7E, 0x00, 0xEB, 0xC6, 0x02, 0x7E, 0xE2,
				0x38, 0x86, 0x7D, 0xBD, 0xE9, 0x21, 0x7E, 0xF5, 0x93, 0xBD, 0xEB, 0x1B, 0xDF, 0xCC, 0x96, 0x84, 0x26, 0x92, 0x7E, 0xF2, 0x51, 0x16, 0x58, 0x8D, 0xE0, 0x37, 0xC1, 0x22, 0x25, 0x21, 0xC1, 0x2C, 0x24, 0x1F, 0x8D, 0xC8, 0x33, 0xC1, 0x28, 0x24, 0x19, 0x37, 0xBD, 0xE9, 0x1A, 0x8D, 0xC0, 0xBD, 0xE9, 0x0F, 0x32, 0xDE, 0xCC, 0x3C, 0x36, 0xBD, 0xEF, 0x0D, 0x32, 0x37, 0x16, 0x20, 0x03, 0x8D,
				0xA3, 0x33, 0xCE, 0xE0, 0x00, 0x3A, 0xEE, 0x00, 0xAD, 0x00, 0x7E, 0xE9, 0x0E, 0x86, 0x4F, 0x97, 0x82, 0xBD, 0xEB, 0xC7, 0xDD, 0x80, 0xBD, 0xF2, 0x8B, 0xBD, 0xEB, 0xC7, 0x7D, 0x00, 0x82, 0x26, 0x06, 0x94, 0x80, 0xD4, 0x81, 0x20, 0x04, 0x9A, 0x80, 0xDA, 0x81, 0x7E, 0xEC, 0xE3, 0xBD, 0xE9, 0x10, 0x26, 0x10, 0x96, 0xDB, 0x8A, 0x7F, 0x94, 0xD7, 0x97, 0xD7, 0xCE, 0x00, 0xD6, 0xBD, 0xF2,
				0xD9, 0x20, 0x40, 0x7F, 0x00, 0x84, 0x7A, 0x00, 0xB9, 0xBD, 0xEE, 0x56, 0xD7, 0xD0, 0xDF, 0xD2, 0xDE, 0xD9, 0xBD, 0xEE, 0x58, 0x96, 0xD0, 0x10, 0x27, 0x07, 0x86, 0x01, 0x24, 0x03, 0xD6, 0xD0, 0x40, 0x97, 0xCE, 0x07, 0x36, 0x9F, 0x91, 0x0F, 0x35, 0xDE, 0xD2, 0x5C, 0x09, 0x5A, 0x26, 0x04, 0xD6, 0xCE, 0x20, 0x0B, 0x32, 0x08, 0xA1, 0x00, 0x27, 0xF3, 0xC6, 0xFF, 0x24, 0x01, 0x50, 0x9E,
				0x91, 0x32, 0x06, 0xCB, 0x01, 0x59, 0xD4, 0x88, 0x27, 0x02, 0xC6, 0xFF, 0x7E, 0xF2, 0xBC, 0xBD, 0xEA, 0x2F, 0x16, 0x8D, 0x0A, 0xBD, 0x00, 0xF3, 0x26, 0xF5, 0x39, 0x5F, 0xBD, 0x00, 0xF3, 0xD7, 0x83, 0x97, 0xB1, 0xBD, 0x00, 0xF3, 0x8D, 0x4E, 0x24, 0x03, 0x7E, 0xEA, 0x3C, 0x5F, 0xD7, 0x84, 0xBD, 0x00, 0xEB, 0x25, 0x04, 0x8D, 0x3F, 0x25, 0x0A, 0x16, 0xBD, 0x00, 0xEB, 0x25, 0xFB, 0x8D,
				0x35, 0x24, 0xF7, 0x81, 0x24, 0x26, 0x08, 0x73, 0x00, 0x84, 0xCB, 0x80, 0xBD, 0x00, 0xEB, 0xD7, 0xB2, 0xD6, 0x86, 0x5A, 0x26, 0x03, 0x7E, 0xEC, 0x07, 0x9B, 0x86, 0x80, 0x28, 0x26, 0x03, 0x7E, 0xEB, 0xDE, 0x7F, 0x00, 0x86, 0xDE, 0x95, 0x9C, 0x97, 0x27, 0x14, 0xDC, 0xB1, 0xA3, 0x00, 0x27, 0x3F, 0xC6, 0x07, 0x3A, 0x20, 0xF1, 0x81, 0x41, 0x25, 0x04, 0x80, 0x5B, 0x80, 0xA5, 0x39, 0x38,
				0x3C, 0x8C, 0xEA, 0x4C, 0x26, 0x04, 0xCE, 0xEB, 0xB7, 0x39, 0xDC, 0x99, 0xDD, 0xBD, 0xC3, 0x00, 0x07, 0xDD, 0xBB, 0xDE, 0x97, 0xDF, 0xC1, 0xBD, 0xE1, 0xFE, 0xDE, 0xBB, 0xDF, 0x99, 0xDE, 0xBF, 0xDF, 0x97, 0xDE, 0xC1, 0xDC, 0xB1, 0xED, 0x00, 0x4F, 0x5F, 0xED, 0x02, 0xED, 0x04, 0xA7, 0x06, 0x08, 0x08, 0xDF, 0xB3, 0x39, 0x90, 0x80, 0x00, 0x00, 0x00, 0xBD, 0x00, 0xEB, 0xBD, 0xE9, 0x0C,
				0xBD, 0xE9, 0x0E, 0x96, 0xCE, 0x2B, 0x67, 0xBD, 0xE9, 0x0E, 0x96, 0xC9, 0x81, 0x90, 0x25, 0x08, 0xCE, 0xEB, 0xB5, 0xBD, 0xF2, 0xD9, 0x26, 0x56, 0xBD, 0xF3, 0x0B, 0xDC, 0xCC, 0x39, 0xDE, 0x83, 0x3C, 0x5F, 0x37, 0xDE, 0xB1, 0x3C, 0x8D, 0xD2, 0x38, 0xDF, 0xB1, 0x33, 0x5C, 0xD7, 0x82, 0x32, 0x33, 0xDE, 0xCC, 0x3C, 0x37, 0x36, 0xD6, 0x82, 0xBD, 0x00, 0xF3, 0x81, 0x2C, 0x27, 0xE3, 0xBD,
				0xEA, 0x29, 0x38, 0xDF, 0x83, 0xC6, 0xFF, 0x37, 0xDE, 0x97, 0x9C, 0x99, 0x27, 0x25, 0xDC, 0xB1, 0xA3, 0x00, 0x27, 0x07, 0xEC, 0x02, 0xBD, 0xE2, 0x2D, 0x20, 0xEF, 0xC6, 0x12, 0x32, 0x4D, 0x27, 0xBC, 0x96, 0x83, 0x26, 0x0B, 0xD6, 0x82, 0xE1, 0x04, 0x27, 0x5C, 0xC6, 0x10, 0x8C, 0xC6, 0x08, 0x7E, 0xE2, 0x38, 0x32, 0x4D, 0x27, 0xF7, 0xCC, 0x00, 0x05, 0xDD, 0xDE, 0xDC, 0xB1, 0xED, 0x00,
				0xD6, 0x82, 0xE7, 0x04, 0xBD, 0xE2, 0x1A, 0xDF, 0xBB, 0xC6, 0x0B, 0x4F, 0x7D, 0x00, 0x83, 0x27, 0x05, 0x32, 0x33, 0xC3, 0x00, 0x01, 0xED, 0x05, 0x8D, 0x5F, 0xDD, 0xDE, 0x08, 0x08, 0x7A, 0x00, 0x82, 0x26, 0xE6, 0xBD, 0xE2, 0x2D, 0x24, 0x03, 0x7E, 0xE2, 0x36, 0xBD, 0xE2, 0x1E, 0x83, 0x00, 0x35, 0xDD, 0x99, 0x4F, 0x09, 0xA7, 0x05, 0x9C, 0x89, 0x26, 0xF9, 0xDE, 0xBB, 0x96, 0x99, 0x93,
				0xBB, 0xED, 0x02, 0x96, 0x83, 0x26, 0x31, 0xE6, 0x04, 0xD7, 0x82, 0x4F, 0x5F, 0xDD, 0xDE, 0x32, 0x33, 0xDD, 0xCC, 0x37, 0x36, 0xA3, 0x05, 0x24, 0x3F, 0xDC, 0xDE, 0x32, 0x33, 0x27, 0x04, 0x8D, 0x18, 0xD3, 0xCC, 0x08, 0x08, 0x7A, 0x00, 0x82, 0x26, 0xE3, 0xDD, 0x89, 0x05, 0x05, 0xD3, 0x89, 0xC3, 0x00, 0x05, 0xBD, 0xE2, 0x2D, 0xDF, 0xB3, 0x39, 0x86, 0x10, 0x97, 0xBF, 0xEC, 0x05, 0xDD,
				0x91, 0x4F, 0x5F, 0x05, 0x25, 0x12, 0x78, 0x00, 0xDF, 0x79, 0x00, 0xDE, 0x24, 0x04, 0xD3, 0x91, 0x25, 0x06, 0x7A, 0x00, 0xBF, 0x26, 0xEC, 0x39, 0x7E, 0xEC, 0x2B, 0x9F, 0x91, 0xDC, 0x91, 0x93, 0x99, 0x21, 0x4F, 0x7F, 0x00, 0x84, 0xDD, 0xCA, 0xC6, 0x90, 0x7E, 0xF2, 0xC3, 0xBD, 0xE9, 0x0E, 0xCE, 0x43, 0x34, 0xBD, 0xF4, 0x29, 0x38, 0xCE, 0x43, 0x33, 0x20, 0x0A, 0xDF, 0xC7, 0x8D, 0x5F,
				0xDF, 0xD2, 0xD7, 0xD0, 0x39, 0x09, 0x86, 0x22, 0x97, 0x80, 0x97, 0x81, 0x08, 0xDF, 0xDC, 0xDF, 0xD2, 0xC6, 0xFF, 0x5C, 0xA6, 0x00, 0x27, 0x0E, 0x08, 0x91, 0x80, 0x27, 0x04, 0x91, 0x81, 0x26, 0xF2, 0x81, 0x22, 0x27, 0x01, 0x09, 0xDF, 0xDE, 0xD7, 0xD0, 0x37, 0xDC, 0xDC, 0x83, 0x43, 0x34, 0x33, 0x22, 0x07, 0x8D, 0xC7, 0xDE, 0xDC, 0xBD, 0xEE, 0x3A, 0xFE, 0x42, 0x3D, 0x8C, 0x42, 0x50,
				0x26, 0x05, 0xC6, 0x1E, 0x7E, 0xE2, 0x38, 0x96, 0xD0, 0xA7, 0x00, 0xDC, 0xD2, 0xED, 0x02, 0x86, 0xFF, 0x97, 0x84, 0xFF, 0x42, 0x3F, 0xDF, 0xCC, 0xC6, 0x05, 0x3A, 0xFF, 0x42, 0x3D, 0x39, 0x7F, 0x00, 0x85, 0x37, 0x4F, 0xDD, 0x89, 0xDC, 0x9D, 0x93, 0x89, 0x93, 0x9B, 0x25, 0x0B, 0xD3, 0x9B, 0xDD, 0x9D, 0xDE, 0x9D, 0x08, 0xDF, 0x9F, 0x33, 0x39, 0xC6, 0x1A, 0x73, 0x00, 0x85, 0x27, 0xC4,
				0x8D, 0x03, 0x33, 0x20, 0xDD, 0xDE, 0xA1, 0xDF, 0x9D, 0x4F, 0x5F, 0xDD, 0xC5, 0xDE, 0x9B, 0xDF, 0xC1, 0xCE, 0x42, 0x41, 0xBC, 0x42, 0x3D, 0x27, 0x04, 0x8D, 0x32, 0x20, 0xF7, 0xDE, 0x95, 0x9C, 0x97, 0x27, 0x04, 0x8D, 0x22, 0x20, 0xF8, 0xDF, 0xBB, 0xDE, 0xBB, 0x9C, 0x99, 0x27, 0x38, 0xEC, 0x02, 0xD3, 0xBB, 0xDD, 0xBB, 0xA6, 0x01, 0x2A, 0xF0, 0xE6, 0x04, 0x58, 0xCB, 0x05, 0x3A, 0x9C,
				0xBB, 0x27, 0xE8, 0x8D, 0x08, 0x20, 0xF8, 0xA6, 0x01, 0x08, 0x08, 0x2A, 0x16, 0xE6, 0x00, 0x27, 0x12, 0xEC, 0x02, 0x93, 0x9D, 0x22, 0x0C, 0xEC, 0x02, 0x93, 0xC1, 0x23, 0x06, 0xDF, 0xC5, 0xEC, 0x02, 0xDD, 0xC1, 0xC6, 0x05, 0x3A, 0x39, 0xDE, 0xC5, 0x27, 0xFB, 0x4F, 0xE6, 0x00, 0x5A, 0xD3, 0xC1, 0xDD, 0xBD, 0xDE, 0x9D, 0xDF, 0xBB, 0xBD, 0xE2, 0x00, 0xDE, 0xC5, 0xDC, 0xBF, 0xED, 0x02,
				0xDE, 0xBF, 0x09, 0x7E, 0xED, 0x87, 0xDE, 0xCC, 0x3C, 0xBD, 0xE9, 0xE5, 0xBD, 0xE9, 0x0F, 0x38, 0xDF, 0xDC, 0xE6, 0x00, 0xDE, 0xCC, 0xEB, 0x00, 0x24, 0x05, 0xC6, 0x1C, 0x7E, 0xE2, 0x38, 0xBD, 0xEC, 0xFC, 0xDE, 0xDC, 0xE6, 0x00, 0x8D, 0x10, 0xDE, 0xC7, 0x8D, 0x2C, 0x8D, 0x0C, 0xDE, 0xDC, 0x8D, 0x26, 0xBD, 0xED, 0x3A, 0x7E, 0xE9, 0x2E, 0xEE, 0x02, 0x07, 0x36, 0x9F, 0x91, 0x0F, 0x35,
				0xDE, 0x9F, 0x5C, 0x20, 0x04, 0x32, 0xA7, 0x00, 0x08, 0x5A, 0x26, 0xF9, 0xDF, 0x9F, 0x9E, 0x91, 0x32, 0x06, 0x39, 0xBD, 0xE9, 0x0F, 0xDE, 0xCC, 0xE6, 0x00, 0x8D, 0x14, 0x26, 0x0F, 0xEE, 0x07, 0x09, 0x9C, 0x9D, 0x26, 0x06, 0x37, 0xD3, 0x9D, 0xDD, 0x9D, 0x33, 0x08, 0x39, 0xEE, 0x02, 0x39, 0xBC, 0x42, 0x3F, 0x26, 0x0C, 0xFF, 0x42, 0x3D, 0x09, 0x09, 0x09, 0x09, 0x09, 0xFF, 0x42, 0x3F,
				0x4F, 0x39, 0x8D, 0x03, 0x7E, 0xEC, 0xE2, 0x8D, 0xCA, 0x7F, 0x00, 0x84, 0x5D, 0x39, 0xBD, 0xEF, 0x10, 0xC6, 0x01, 0xBD, 0xED, 0x5F, 0x96, 0xCD, 0xBD, 0xED, 0x00, 0xA7, 0x00, 0x31, 0x31, 0x7E, 0xED, 0x3A, 0x8D, 0x02, 0x20, 0xDE, 0x8D, 0xDF, 0x27, 0x5D, 0xE6, 0x00, 0x39, 0x8D, 0x43, 0x4F, 0xE1, 0x00, 0x23, 0x03, 0xE6, 0x00, 0x4F, 0x37, 0x36, 0xBD, 0xEC, 0xFE, 0xDE, 0xC7, 0x8D, 0x98,
				0x33, 0x3A, 0x33, 0xBD, 0xEE, 0x3A, 0x20, 0xD7, 0x8D, 0x28, 0xA6, 0x00, 0x10, 0x20, 0xE1, 0xC6, 0xFF, 0xD7, 0xCD, 0x8D, 0x44, 0x81, 0x29, 0x27, 0x03, 0xBD, 0xEF, 0x47, 0x8D, 0x14, 0x27, 0x27, 0x5F, 0x4A, 0xA1, 0x00, 0x24, 0xD1, 0x16, 0xE0, 0x00, 0x50, 0xD1, 0xCD, 0x23, 0xC9, 0xD6, 0xCD, 0x20, 0xC5, 0xBD, 0xEA, 0x29, 0x30, 0xEC, 0x05, 0xDD, 0xC7, 0xEC, 0x00, 0xED, 0x05, 0x31, 0x31,
				0x31, 0x31, 0x32, 0xDE, 0xC7, 0x16, 0x39, 0x7E, 0xEC, 0x2E, 0xBD, 0x00, 0xEB, 0xBD, 0xE9, 0x0C, 0xBD, 0xEB, 0xC0, 0x96, 0xCC, 0x26, 0xF0, 0xD6, 0xCD, 0x7E, 0x00, 0xF3, 0xBD, 0xEE, 0x87, 0x26, 0x03, 0x7E, 0xEF, 0xF4, 0xBD, 0xE2, 0x2C, 0xA6, 0x00, 0x36, 0x6F, 0x00, 0xDE, 0xF4, 0xDF, 0xDE, 0xDE, 0x89, 0xDF, 0xF4, 0x8D, 0xE3, 0xBD, 0xF3, 0x59, 0x32, 0xDE, 0x8B, 0xA7, 0x00, 0xDE, 0xDE,
				0xDF, 0xF4, 0x39, 0x8D, 0x07, 0xDF, 0xA5, 0xBD, 0xEA, 0x2F, 0x20, 0xC1, 0xBD, 0xE9, 0x0C, 0x96, 0xCE, 0x2B, 0xB4, 0x96, 0xC9, 0x81, 0x90, 0x22, 0xAE, 0xBD, 0xF3, 0x0B, 0xDE, 0xCC, 0x39, 0x8D, 0xEE, 0xE6, 0x00, 0x7E, 0xEC, 0xE2, 0x8D, 0xDB, 0xDE, 0xA5, 0xE7, 0x00, 0x39, 0xCE, 0xF5, 0x24, 0x20, 0x0B, 0xBD, 0xF1, 0x60, 0x73, 0x00, 0xCE, 0x73, 0x00, 0xDC, 0x20, 0x03, 0xBD, 0xF1, 0x60,
				0x5D, 0x26, 0x03, 0x7E, 0xF2, 0x8B, 0xCE, 0x00, 0xD6, 0x16, 0x27, 0x6D, 0xD0, 0xC9, 0x27, 0x6A, 0x2B, 0x0A, 0x97, 0xC9, 0x96, 0xDB, 0x97, 0xCE, 0xCE, 0x00, 0xC9, 0x50, 0xC1, 0xF8, 0x2F, 0x5A, 0x4F, 0x64, 0x01, 0xBD, 0xF0, 0x80, 0xD6, 0xDC, 0x2A, 0x0B, 0x63, 0x01, 0x63, 0x02, 0x63, 0x03, 0x63, 0x04, 0x43, 0x89, 0x00, 0x97, 0xDD, 0x96, 0xCD, 0x99, 0xDA, 0x97, 0xCD, 0x96, 0xCC, 0x99,
				0xD9, 0x97, 0xCC, 0x96, 0xCB, 0x99, 0xD8, 0x97, 0xCB, 0x96, 0xCA, 0x99, 0xD7, 0x97, 0xCA, 0x17, 0x2A, 0x47, 0x25, 0x02, 0x8D, 0x66, 0x5F, 0x96, 0xCA, 0x26, 0x34, 0x96, 0xCB, 0x97, 0xCA, 0x96, 0xCC, 0x97, 0xCB, 0x96, 0xCD, 0x97, 0xCC, 0x96, 0xDD, 0x97, 0xCD, 0x7F, 0x00, 0xDD, 0xCB, 0x08, 0xC1, 0x28, 0x2D, 0xE3, 0x4F, 0x97, 0xC9, 0x97, 0xCE, 0x39, 0x8D, 0x78, 0x0C, 0x20, 0xA7, 0x5C,
				0x78, 0x00, 0xDD, 0x79, 0x00, 0xCD, 0x79, 0x00, 0xCC, 0x79, 0x00, 0xCB, 0x79, 0x00, 0xCA, 0x2A, 0xEE, 0x96, 0xC9, 0x10, 0x97, 0xC9, 0x23, 0xDC, 0x8C, 0x25, 0x09, 0x78, 0x00, 0xDD, 0x86, 0x00, 0x97, 0xDD, 0x20, 0x11, 0x7C, 0x00, 0xC9, 0x27, 0x2F, 0x76, 0x00, 0xCA, 0x76, 0x00, 0xCB, 0x76, 0x00, 0xCC, 0x76, 0x00, 0xCD, 0x24, 0x04, 0x8D, 0x12, 0x27, 0xE9, 0x39, 0x73, 0x00, 0xCE, 0x73,
				0x00, 0xCA, 0x73, 0x00, 0xCB, 0x73, 0x00, 0xCC, 0x73, 0x00, 0xCD, 0xDE, 0xCC, 0x08, 0xDF, 0xCC, 0x26, 0x05, 0xDE, 0xCA, 0x08, 0xDF, 0xCA, 0x39, 0xC6, 0x0A, 0x7E, 0xE2, 0x38, 0xCE, 0x00, 0x8C, 0xA6, 0x04, 0x97, 0xDD, 0xA6, 0x03, 0xA7, 0x04, 0xA6, 0x02, 0xA7, 0x03, 0xA6, 0x01, 0xA7, 0x02, 0x96, 0xD5, 0xA7, 0x01, 0xCB, 0x08, 0x2F, 0xE8, 0x96, 0xDD, 0xC0, 0x08, 0x27, 0x0C, 0x67, 0x01,
				0x66, 0x02, 0x66, 0x03, 0x66, 0x04, 0x46, 0x5C, 0x26, 0xF4, 0x39, 0x81, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7F, 0x5E, 0x56, 0xCB, 0x79, 0x80, 0x13, 0x9B, 0x0B, 0x64, 0x80, 0x76, 0x38, 0x93, 0x16, 0x82, 0x38, 0xAA, 0x3B, 0x20, 0x80, 0x35, 0x04, 0xF3, 0x34, 0x81, 0x35, 0x04, 0xF3, 0x34, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x31, 0x72, 0x17, 0xF8, 0xBD, 0xF2, 0xAD, 0x2E, 0x03, 0x7E, 0xEC,
				0x2E, 0xCE, 0xF0, 0xA5, 0x96, 0xC9, 0x80, 0x80, 0x36, 0x86, 0x80, 0x97, 0xC9, 0xBD, 0xEF, 0x7D, 0xCE, 0xF0, 0xAA, 0xBD, 0xF1, 0xC6, 0xCE, 0xF0, 0x8B, 0xBD, 0xEF, 0x72, 0xCE, 0xF0, 0x90, 0xBD, 0xF5, 0xF8, 0xCE, 0xF0, 0xAF, 0xBD, 0xEF, 0x7D, 0x33, 0xBD, 0xF3, 0xE9, 0xCE, 0xF0, 0xB4, 0x8D, 0x6F, 0x27, 0x6C, 0xBD, 0xF1, 0x79, 0x86, 0x00, 0x97, 0x8D, 0x97, 0x8E, 0x97, 0x8F, 0x97, 0x90,
				0xD6, 0xCD, 0x8D, 0x26, 0xD6, 0xDD, 0xF7, 0x42, 0x55, 0xD6, 0xCC, 0x8D, 0x1D, 0xD6, 0xDD, 0xF7, 0x42, 0x54, 0xD6, 0xCB, 0x8D, 0x14, 0xD6, 0xDD, 0xF7, 0x42, 0x53, 0xD6, 0xCA, 0x8D, 0x10, 0xD6, 0xDD, 0xF7, 0x42, 0x52, 0xBD, 0xF2, 0x48, 0x7E, 0xEF, 0xD6, 0x26, 0x03, 0x7E, 0xF0, 0x5D, 0x0D, 0x96, 0x8D, 0x56, 0x27, 0x2A, 0x24, 0x16, 0x96, 0x90, 0x9B, 0xDA, 0x97, 0x90, 0x96, 0x8F, 0x99,
				0xD9, 0x97, 0x8F, 0x96, 0x8E, 0x99, 0xD8, 0x97, 0x8E, 0x96, 0x8D, 0x99, 0xD7, 0x46, 0x97, 0x8D, 0x76, 0x00, 0x8E, 0x76, 0x00, 0x8F, 0x76, 0x00, 0x90, 0x76, 0x00, 0xDD, 0x0C, 0x20, 0xD1, 0x39, 0xEC, 0x01, 0x97, 0xDB, 0x8A, 0x80, 0xDD, 0xD7, 0xD6, 0xDB, 0xD8, 0xCE, 0xD7, 0xDC, 0xEC, 0x03, 0xDD, 0xD9, 0xA6, 0x00, 0x97, 0xD6, 0xD6, 0xC9, 0x39, 0x4D, 0x27, 0x19, 0x9B, 0xC9, 0x46, 0x49,
				0x28, 0x13, 0x8B, 0x80, 0x97, 0xC9, 0x26, 0x03, 0x7E, 0xEF, 0xF7, 0x96, 0xDC, 0x97, 0xCE, 0x39, 0x96, 0xCE, 0x43, 0x20, 0x02, 0x32, 0x32, 0x2B, 0x03, 0x7E, 0xEF, 0xF4, 0x7E, 0xF0, 0x58, 0xBD, 0xF2, 0x9F, 0x27, 0x0F, 0x8B, 0x02, 0x25, 0xF4, 0x7F, 0x00, 0xDC, 0xBD, 0xEF, 0x89, 0x7C, 0x00, 0xC9, 0x27, 0xE9, 0x39, 0x84, 0x20, 0x00, 0x00, 0x00, 0xBD, 0xF2, 0x9F, 0xCE, 0xF1, 0xB4, 0x5F,
				0xD7, 0xDC, 0xBD, 0xF2, 0x51, 0x8C, 0x8D, 0x98, 0x27, 0x79, 0x70, 0x00, 0xC9, 0x8D, 0xAA, 0x7C, 0x00, 0xC9, 0x27, 0xC8, 0xCE, 0x00, 0x8D, 0xC6, 0x04, 0xD7, 0x82, 0xC6, 0x01, 0x96, 0xCA, 0x91, 0xD7, 0x26, 0x13, 0x96, 0xCB, 0x91, 0xD8, 0x26, 0x0D, 0x96, 0xCC, 0x91, 0xD9, 0x26, 0x07, 0x96, 0xCD, 0x91, 0xDA, 0x26, 0x01, 0x0D, 0x07, 0x59, 0x24, 0x0C, 0xE7, 0x00, 0x08, 0x7A, 0x00, 0x82,
				0x2B, 0x37, 0x27, 0x31, 0xC6, 0x01, 0x06, 0x25, 0x12, 0x78, 0x00, 0xDA, 0x79, 0x00, 0xD9, 0x79, 0x00, 0xD8, 0x79, 0x00, 0xD7, 0x25, 0xDF, 0x2B, 0xC4, 0x20, 0xDB, 0x96, 0xDA, 0x90, 0xCD, 0x97, 0xDA, 0x96, 0xD9, 0x92, 0xCC, 0x97, 0xD9, 0x96, 0xD8, 0x92, 0xCB, 0x97, 0xD8, 0x96, 0xD7, 0x92, 0xCA, 0x97, 0xD7, 0x20, 0xD4, 0xC6, 0x40, 0x20, 0xCD, 0x56, 0x56, 0x56, 0xD7, 0xDD, 0x8D, 0x08,
				0x7E, 0xEF, 0xD6, 0xC6, 0x14, 0x7E, 0xE2, 0x38, 0xDE, 0x8D, 0xDF, 0xCA, 0xDE, 0x8F, 0xDF, 0xCC, 0x39, 0x36, 0xEC, 0x01, 0x97, 0xCE, 0x8A, 0x80, 0xDD, 0xCA, 0x7F, 0x00, 0xDD, 0xE6, 0x00, 0xEE, 0x03, 0xDF, 0xCC, 0xD7, 0xC9, 0x32, 0x39, 0xCE, 0x00, 0xBF, 0x20, 0x06, 0xCE, 0x00, 0xBA, 0x8C, 0xDE, 0xB5, 0x96, 0xC9, 0xA7, 0x00, 0x96, 0xCE, 0x8A, 0x7F, 0x94, 0xCA, 0xA7, 0x01, 0x96, 0xCB,
				0xA7, 0x02, 0x96, 0xCC, 0xA7, 0x03, 0x96, 0xCD, 0xA7, 0x04, 0x39, 0x96, 0xDB, 0x97, 0xCE, 0xDE, 0xD6, 0xDF, 0xC9, 0x7F, 0x00, 0xDD, 0xDE, 0xD8, 0xDF, 0xCB, 0xDE, 0xD9, 0xDF, 0xCC, 0x39, 0xDC, 0xC9, 0xDD, 0xD6, 0xDE, 0xCB, 0xDF, 0xD8, 0xDE, 0xCD, 0xDF, 0xDA, 0x4D, 0x39, 0xD6, 0xC9, 0x27, 0x08, 0xD6, 0xCE, 0x59, 0xC6, 0xFF, 0x25, 0x01, 0x50, 0x39, 0x8D, 0xF1, 0xD7, 0xCA, 0x7F, 0x00,
				0xCB, 0xC6, 0x88, 0x96, 0xCA, 0x80, 0x80, 0xD7, 0xC9, 0x86, 0x00, 0x16, 0xDD, 0xCC, 0x97, 0xDD, 0x97, 0xCE, 0x7E, 0xEF, 0xD2, 0x7F, 0x00, 0xCE, 0x39, 0xE6, 0x00, 0x27, 0xD0, 0xE6, 0x01, 0xD8, 0xCE, 0x2B, 0xCE, 0xD6, 0xC9, 0xE1, 0x00, 0x26, 0x1D, 0xE6, 0x01, 0xCA, 0x7F, 0xD4, 0xCA, 0xE1, 0x01, 0x26, 0x13, 0xD6, 0xCB, 0xE1, 0x02, 0x26, 0x0D, 0xD6, 0xCC, 0xE1, 0x03, 0x26, 0x07, 0xD6,
				0xCD, 0xE0, 0x04, 0x26, 0x01, 0x39, 0x56, 0xD8, 0xCE, 0x20, 0xA8, 0xD6, 0xC9, 0x27, 0x41, 0xC0, 0xA0, 0x96, 0xCE, 0x2A, 0x06, 0x73, 0x00, 0xD5, 0xBD, 0xF0, 0x3F, 0xCE, 0x00, 0xC9, 0xC1, 0xF8, 0x2E, 0x07, 0xBD, 0xF0, 0x74, 0x7F, 0x00, 0xD5, 0x39, 0x7F, 0x00, 0xD5, 0x96, 0xCE, 0x49, 0x76, 0x00, 0xCA, 0x7E, 0xF0, 0x80, 0xD6, 0xC9, 0xC1, 0xA0, 0x24, 0x1D, 0x8D, 0xCE, 0xD7, 0xDD, 0x96,
				0xCE, 0xD7, 0xCE, 0x80, 0x80, 0x86, 0xA0, 0x97, 0xC9, 0x96, 0xCD, 0x97, 0x80, 0x7E, 0xEF, 0xD2, 0xD7, 0xCA, 0xD7, 0xCB, 0xD7, 0xCC, 0xD7, 0xCD, 0x39, 0xBD, 0x42, 0x9D, 0xCE, 0x00, 0x00, 0xDF, 0xCE, 0xDF, 0xC9, 0xDF, 0xCB, 0xDF, 0xCC, 0xDF, 0xC1, 0xDF, 0xBF, 0x25, 0x6B, 0x81, 0x2D, 0x26, 0x05, 0x73, 0x00, 0xCF, 0x20, 0x04, 0x81, 0x2B, 0x26, 0x05, 0xBD, 0x00, 0xEB, 0x25, 0x59, 0x81,
				0x2E, 0x27, 0x2D, 0x81, 0x45, 0x26, 0x2E, 0xBD, 0x00, 0xEB, 0x25, 0x69, 0x81, 0xA8, 0x27, 0x0E, 0x81, 0x2D, 0x27, 0x0A, 0x81, 0xA7, 0x27, 0x09, 0x81, 0x2B, 0x27, 0x05, 0x20, 0x08, 0x73, 0x00, 0xC2, 0xBD, 0x00, 0xEB, 0x25, 0x4F, 0x7D, 0x00, 0xC2, 0x27, 0x0A, 0x70, 0x00, 0xC1, 0x20, 0x05, 0x73, 0x00, 0xC0, 0x26, 0xC5, 0x96, 0xC1, 0x90, 0xBF, 0x97, 0xC1, 0x27, 0x14, 0x2A, 0x0A, 0xBD,
				0xF1, 0xB9, 0x7C, 0x00, 0xC1, 0x26, 0xF8, 0x20, 0x08, 0xBD, 0xF1, 0x9F, 0x7A, 0x00, 0xC1, 0x26, 0xF8, 0x96, 0xCF, 0x2A, 0x83, 0x7E, 0xF5, 0x93, 0xD6, 0xBF, 0xD0, 0xC0, 0xD7, 0xBF, 0x36, 0xBD, 0xF1, 0x9F, 0x33, 0xC0, 0x30, 0x8D, 0x02, 0x20, 0x91, 0xBD, 0xF2, 0x6C, 0xBD, 0xF2, 0xBC, 0xCE, 0x00, 0xBA, 0x7E, 0xEF, 0x7D, 0xD6, 0xC1, 0x58, 0x58, 0xDB, 0xC1, 0x58, 0x80, 0x30, 0x1B, 0x97,
				0xC1, 0x20, 0x9E, 0x9B, 0x3E, 0xBC, 0x1F, 0xFD, 0x9E, 0x6E, 0x6B, 0x27, 0xFD, 0x9E, 0x6E, 0x6B, 0x28, 0x00, 0xCE, 0xE1, 0xB6, 0x8D, 0x0C, 0xDC, 0xE2, 0xDD, 0xCA, 0xC6, 0x90, 0x0D, 0xBD, 0xF2, 0xC7, 0x8D, 0x03, 0x7E, 0xE7, 0xA8, 0xCE, 0x43, 0x35, 0x86, 0x20, 0xD6, 0xCE, 0x2A, 0x02, 0x86, 0x2D, 0xA7, 0x00, 0x97, 0xCE, 0xDF, 0xDE, 0x08, 0x86, 0x30, 0xD6, 0xC9, 0x26, 0x03, 0x7E, 0xF5,
				0x1C, 0x4F, 0xC1, 0x80, 0x22, 0x08, 0xCE, 0xF4, 0x0D, 0xBD, 0xF0, 0xEF, 0x86, 0xF7, 0x97, 0xBF, 0xCE, 0xF4, 0x08, 0xBD, 0xF2, 0xE3, 0x2E, 0x10, 0xCE, 0xF4, 0x03, 0xBD, 0xF2, 0xE3, 0x2E, 0x10, 0xBD, 0xF1, 0x9F, 0x7A, 0x00, 0xBF, 0x20, 0xF0, 0xBD, 0xF1, 0xB9, 0x7C, 0x00, 0xBF, 0x20, 0xE0, 0xBD, 0xEF, 0x6D, 0xBD, 0xF3, 0x0B, 0xC6, 0x01, 0x96, 0xBF, 0x8B, 0x0A, 0x2B, 0x08, 0x81, 0x0B,
				0x24, 0x04, 0x4A, 0x16, 0x86, 0x02, 0x4A, 0x4A, 0x97, 0xC1, 0xD7, 0xBF, 0x2E, 0x11, 0xDE, 0xDE, 0x86, 0x2E, 0x08, 0xA7, 0x00, 0x5D, 0x27, 0x05, 0x86, 0x30, 0x08, 0xA7, 0x00, 0xDF, 0xDE, 0xCE, 0xF5, 0x29, 0xC6, 0x80, 0x96, 0xCD, 0xAB, 0x03, 0x97, 0xCD, 0x96, 0xCC, 0xA9, 0x02, 0x97, 0xCC, 0x96, 0xCB, 0xA9, 0x01, 0x97, 0xCB, 0x96, 0xCA, 0xA9, 0x00, 0x97, 0xCA, 0x5C, 0x56, 0x59, 0x28,
				0xE3, 0x24, 0x03, 0xC0, 0x0B, 0x50, 0xCB, 0x2F, 0x08, 0x08, 0x08, 0x08, 0xDF, 0xB3, 0xDE, 0xDE, 0x08, 0x17, 0x84, 0x7F, 0xA7, 0x00, 0x7A, 0x00, 0xBF, 0x26, 0x05, 0x86, 0x2E, 0x08, 0xA7, 0x00, 0xDF, 0xDE, 0xDE, 0xB3, 0x53, 0xC4, 0x80, 0x8C, 0xF5, 0x4D, 0x26, 0xB8, 0xDE, 0xDE, 0xA6, 0x00, 0x09, 0x81, 0x30, 0x27, 0xF9, 0x81, 0x2E, 0x27, 0x01, 0x08, 0x86, 0x2B, 0xD6, 0xC1, 0x27, 0x1E,
				0x2A, 0x03, 0x86, 0x2D, 0x50, 0xA7, 0x02, 0x86, 0x45, 0xA7, 0x01, 0x86, 0x2F, 0x4C, 0xC0, 0x0A, 0x24, 0xFB, 0xCB, 0x3A, 0xA7, 0x03, 0xE7, 0x04, 0x6F, 0x05, 0x20, 0x04, 0xA7, 0x00, 0x6F, 0x01, 0xCE, 0x43, 0x35, 0x39, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x0A, 0x1F, 0x00, 0x00, 0x98, 0x96, 0x80, 0xFF, 0xF0, 0xBD, 0xC0, 0x00, 0x01, 0x86, 0xA0, 0xFF, 0xFF, 0xD8, 0xF0, 0x00, 0x00, 0x03,
				0xE8, 0xFF, 0xFF, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x0A, 0xFF, 0xFF, 0xFF, 0xFF, 0xBD, 0xF2, 0x9F, 0xCE, 0xF5, 0x24, 0xBD, 0xF2, 0x51, 0x27, 0x71, 0x4D, 0x26, 0x0A, 0x96, 0xCE, 0x2A, 0x03, 0x7E, 0xF2, 0x43, 0x7E, 0xEF, 0xF5, 0xCE, 0x00, 0xC4, 0xBD, 0xF2, 0x72, 0x5F, 0x96, 0xDB, 0x2A, 0x10, 0xBD, 0xF3, 0x35, 0xCE, 0x00, 0xC4, 0x96, 0xDB, 0xBD, 0xF2, 0xE3, 0x26, 0x03, 0x43, 0xD6, 0x80,
				0xBD, 0xF2, 0x8D, 0x37, 0xBD, 0xF0, 0xB9, 0xCE, 0x00, 0xC4, 0xBD, 0xF0, 0xEF, 0x8D, 0x3A, 0x32, 0x46, 0x24, 0x90, 0x96, 0xC9, 0x27, 0x03, 0x73, 0x00, 0xCE, 0x39, 0x81, 0x38, 0xAA, 0x3B, 0x29, 0x07, 0x71, 0x34, 0x58, 0x3E, 0x56, 0x74, 0x16, 0x7E, 0xB3, 0x1B, 0x77, 0x2F, 0xEE, 0xE3, 0x85, 0x7A, 0x1D, 0x84, 0x1C, 0x2A, 0x7C, 0x63, 0x59, 0x58, 0x0A, 0x7E, 0x75, 0xFD, 0xE7, 0xC6, 0x80,
				0x31, 0x72, 0x18, 0x10, 0x81, 0x00, 0x00, 0x00, 0x00, 0xCE, 0xF5, 0x9B, 0x8D, 0x36, 0xBD, 0xF2, 0x6C, 0x96, 0xC9, 0x81, 0x88, 0x25, 0x03, 0x7E, 0xF1, 0x90, 0xBD, 0xF3, 0x35, 0x96, 0x80, 0x8B, 0x81, 0x27, 0xF4, 0x4A, 0x36, 0xCE, 0x00, 0xBA, 0xBD, 0xEF, 0x72, 0xCE, 0xF5, 0xA0, 0x8D, 0x17, 0x7F, 0x00, 0xDC, 0x32, 0xBD, 0xF1, 0x79, 0x39, 0xDF, 0xDE, 0xBD, 0xF2, 0x6C, 0x8D, 0x05, 0x8D,
				0x08, 0xCE, 0x00, 0xBA, 0x7E, 0xF0, 0xEF, 0xDF, 0xDE, 0xBD, 0xF2, 0x67, 0xDE, 0xDE, 0xE6, 0x00, 0xD7, 0xCF, 0x08, 0xDF, 0xDE, 0x8D, 0xED, 0xDE, 0xDE, 0xC6, 0x05, 0x3A, 0xDF, 0xDE, 0xBD, 0xEF, 0x7D, 0xCE, 0x00, 0xBF, 0x7A, 0x00, 0xCF, 0x26, 0xEC, 0x39, 0xBD, 0xF2, 0xAD, 0x2B, 0x21, 0x27, 0x15, 0x8D, 0x10, 0xBD, 0xF2, 0x6C, 0x8D, 0x0E, 0xCE, 0x00, 0xBA, 0x8D, 0xC7, 0xCE, 0xF0, 0x8B,
				0xBD, 0xEF, 0x7D, 0x7E, 0xF3, 0x35, 0xFE, 0x42, 0x18, 0xDF, 0xCA, 0xFE, 0x42, 0x1A, 0xDF, 0xCC, 0xFE, 0xF6, 0x82, 0xDF, 0xD7, 0xFE, 0xF6, 0x84, 0xDF, 0xD9, 0xBD, 0xF0, 0xF6, 0xFC, 0x42, 0x54, 0xC3, 0x65, 0x8B, 0xFD, 0x42, 0x1A, 0xDD, 0xCC, 0xFC, 0x42, 0x52, 0xC9, 0xB0, 0x89, 0x05, 0xFD, 0x42, 0x18, 0xDD, 0xCA, 0x7F, 0x00, 0xCE, 0x86, 0x80, 0x97, 0xC9, 0x96, 0x8F, 0x97, 0xDD, 0x7E,
				0xEF, 0xD6, 0x40, 0xE6, 0x4D, 0xAB, 0xCE, 0xF6, 0xF6, 0xBD, 0xEF, 0x7D, 0xBD, 0xF2, 0x9F, 0xCE, 0xF6, 0xFB, 0xD6, 0xDB, 0xBD, 0xF1, 0xC0, 0xBD, 0xF2, 0x9F, 0xBD, 0xF3, 0x35, 0x7F, 0x00, 0xDC, 0x96, 0xD6, 0xD6, 0xC9, 0xBD, 0xEF, 0x75, 0xCE, 0xF7, 0x00, 0xBD, 0xEF, 0x72, 0x96, 0xCE, 0x36, 0x2A, 0x0A, 0xBD, 0xEF, 0x6D, 0x96, 0xCE, 0x2B, 0x06, 0x73, 0x00, 0x88, 0xBD, 0xF5, 0x93, 0xCE,
				0xF7, 0x00, 0xBD, 0xEF, 0x7D, 0x32, 0x4D, 0x2A, 0x03, 0xBD, 0xF5, 0x93, 0xCE, 0xF7, 0x05, 0x7E, 0xF5, 0xF8, 0xBD, 0xF2, 0x6C, 0x7F, 0x00, 0x88, 0x8D, 0xB2, 0xCE, 0x00, 0xC4, 0xBD, 0xF2, 0x72, 0xCE, 0x00, 0xBA, 0xBD, 0xF2, 0x51, 0x7F, 0x00, 0xCE, 0x96, 0x88, 0x8D, 0x06, 0xCE, 0x00, 0xC4, 0x7E, 0xF1, 0xC6, 0x36, 0x20, 0xC6, 0x81, 0x49, 0x0F, 0xDA, 0xA2, 0x83, 0x49, 0x0F, 0xDA, 0xA2,
				0x7F, 0x00, 0x00, 0x00, 0x00, 0x05, 0x84, 0xE6, 0x1A, 0x2D, 0x1B, 0x86, 0x28, 0x07, 0xFB, 0xF8, 0x87, 0x99, 0x68, 0x89, 0x01, 0x87, 0x23, 0x35, 0xDF, 0xE1, 0x86, 0xA5, 0x5D, 0xE7, 0x28, 0x83, 0x49, 0x0F, 0xDA, 0xA2, 0xA1, 0x54, 0x46, 0x8F, 0x13, 0x8F, 0x52, 0x43, 0x89, 0xCD, 0x86, 0xFF, 0x97, 0x00, 0x86, 0x01, 0x97, 0x01, 0x86, 0x01, 0x97, 0x03, 0x96, 0xEA, 0x81, 0x55, 0x26, 0x0A,
				0xFE, 0x42, 0x21, 0xA6, 0x00, 0x4A, 0x26, 0x02, 0x6E, 0x00, 0xCE, 0x00, 0x80, 0x6F, 0x00, 0x08, 0x8C, 0x01, 0x00, 0x26, 0xF8, 0xCE, 0x41, 0xFD, 0x08, 0xA6, 0x02, 0x63, 0x02, 0xE6, 0x02, 0x6F, 0x02, 0x43, 0x11, 0x27, 0xF3, 0xFF, 0x42, 0x50, 0xDF, 0xA1, 0xDF, 0x9D, 0xDC, 0x9D, 0x83, 0x00, 0x64, 0xDD, 0x9B, 0x9E, 0x9B, 0xCE, 0xF7, 0xCF, 0xCC, 0x00, 0xEB, 0x8D, 0x30, 0xCE, 0xF7, 0xDE,
				0xCC, 0x42, 0x00, 0x8D, 0x28, 0x86, 0x39, 0xCE, 0x42, 0x85, 0xA7, 0x00, 0x08, 0x8C, 0x42, 0xAF, 0x26, 0xF8, 0x73, 0x42, 0xAF, 0xCE, 0x43, 0x46, 0xDF, 0x93, 0xBD, 0xE3, 0xCF, 0xBD, 0xFB, 0xD4, 0xCE, 0xF8, 0x0F, 0xBD, 0xE7, 0xA8, 0x86, 0x55, 0x97, 0xEA, 0x7E, 0xE2, 0x71, 0xDD, 0xBF, 0xE6, 0x00, 0x08, 0xA6, 0x00, 0xDF, 0xC1, 0xDE, 0xBF, 0xA7, 0x00, 0x08, 0xDF, 0xBF, 0xDE, 0xC1, 0x5A,
				0x26, 0xEF, 0x39, 0x01, 0x7F, 0x00, 0xE8, 0xBD, 0xE3, 0xEE, 0xBD, 0xFB, 0xD4, 0x20, 0xDB, 0x0E, 0x7C, 0x00, 0xF5, 0x26, 0x03, 0x7C, 0x00, 0xF4, 0xB6, 0x00, 0x00, 0x7E, 0xE1, 0xC8, 0x31, 0x3B, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x7E, 0xEC, 0x2E, 0x4F, 0xC7, 0x52, 0x59, 0xFF, 0x04, 0x5E, 0xEC, 0x2E,
				0xF7, 0xC3, 0x00, 0x76, 0x00, 0x01, 0x10, 0x70, 0x84, 0x00, 0x01, 0x15, 0x1A, 0x0B, 0x00, 0x80, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x42, 0x41, 0x53, 0x49, 0x43, 0x20, 0x31, 0x2E, 0x30, 0x0D, 0x43, 0x4F, 0x50, 0x59, 0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x31, 0x39, 0x38, 0x32, 0x20, 0x4D, 0x49, 0x43, 0x52, 0x4F, 0x53, 0x4F, 0x46, 0x54, 0x0D, 0x00, 0x7A,
				0x42, 0x2B, 0x26, 0x1A, 0xB6, 0x42, 0x82, 0x88, 0x0F, 0xB7, 0x42, 0x82, 0x8A, 0x80, 0xFE, 0x42, 0x80, 0xA7, 0x00, 0xC6, 0x16, 0x84, 0x0F, 0x27, 0x02, 0xC6, 0x58, 0xF7, 0x42, 0x2B, 0xCE, 0x03, 0xFA, 0x09, 0x26, 0xFD, 0x39, 0xBD, 0x42, 0x85, 0x3C, 0x37, 0x8D, 0xD3, 0x8D, 0x15, 0x27, 0xFA, 0xC6, 0x60, 0xFE, 0x42, 0x80, 0xE7, 0x00, 0x20, 0x52, 0x4F, 0x8D, 0x54, 0x26, 0x05, 0x8D, 0x64,
				0x4C, 0x27, 0x4A, 0xBD, 0x42, 0xA9, 0x3C, 0x37, 0x86, 0xFB, 0x8D, 0x44, 0x16, 0x27, 0x03, 0xF8, 0x42, 0x3B, 0xB7, 0x42, 0x3B, 0x5D, 0x27, 0x06, 0x8D, 0x42, 0x8D, 0x36, 0x26, 0x2A, 0xCE, 0x42, 0x30, 0x5F, 0x5A, 0xF7, 0x42, 0x39, 0x59, 0x24, 0x1D, 0x7C, 0x42, 0x39, 0x8D, 0x34, 0x37, 0x16, 0x08, 0xA8, 0x00, 0xA4, 0x00, 0xE7, 0x00, 0x33, 0x4D, 0x0D, 0x27, 0xEA, 0x36, 0x8D, 0x1D, 0x8D,
				0x23, 0xA1, 0x00, 0x32, 0x26, 0x24, 0x4F, 0x8C, 0x86, 0x03, 0x4D, 0x33, 0x38, 0x39, 0x86, 0x7F, 0x97, 0x02, 0x96, 0x03, 0x43, 0x84, 0x02, 0x27, 0x02, 0x86, 0xFF, 0x39, 0xFE, 0x42, 0x1D, 0x7E, 0xF8, 0x61, 0xD7, 0x02, 0xB6, 0xBF, 0xFF, 0x8A, 0xC0, 0x39, 0xC6, 0xF8, 0xCB, 0x08, 0x44, 0x24, 0xFB, 0xFB, 0x42, 0x39, 0x86, 0xFE, 0x8D, 0xD8, 0xB7, 0x42, 0x3A, 0xBD, 0x42, 0xAC, 0x27, 0x11,
				0xCE, 0xF9, 0x7C, 0xC1, 0x20, 0x26, 0x27, 0xB6, 0x42, 0x82, 0x8B, 0x10, 0xB7, 0x42, 0x82, 0x20, 0xB5, 0x17, 0x27, 0x05, 0xC1, 0x1A, 0x23, 0x1B, 0x8C, 0xC6, 0x1D, 0xCE, 0xF9, 0x39, 0x8D, 0xAE, 0x27, 0x0C, 0xCE, 0xF9, 0x4C, 0xC1, 0x20, 0x26, 0x05, 0x73, 0x42, 0x1C, 0x20, 0x98, 0x3A, 0xA6, 0x00, 0x20, 0x97, 0x8D, 0x99, 0xB8, 0x42, 0x1C, 0x26, 0x07, 0xB6, 0x42, 0x1C, 0x26, 0x07, 0xCA,
				0x20, 0x17, 0x8A, 0x40, 0x20, 0x84, 0xCE, 0xF9, 0xAB, 0x3A, 0xA6, 0x00, 0x2A, 0xF6, 0xF6, 0x42, 0x82, 0xC4, 0x70, 0x1B, 0x20, 0xEE, 0x40, 0x0D, 0x20, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x2C, 0x2D, 0x2E, 0x2F, 0x13, 0x0D, 0x20, 0x00, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x3C, 0x3D, 0x3E, 0x3F, 0x88, 0x08, 0xB3, 0xB2,
				0x82, 0x9B, 0x90, 0x84, 0xA3, 0x8A, 0x81, 0x9E, 0xBC, 0xBA, 0xB9, 0xA5, 0xC7, 0x15, 0x9C, 0x09, 0x8C, 0x80, 0xB5, 0x5E, 0xB1, 0x8F, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x20, 0x00, 0x8E, 0x93, 0x98, 0x97, 0x96, 0x94, 0x95, 0x9D, 0x86, 0x89, 0x92, 0xBB, 0x91, 0xB7, 0xB6, 0x89, 0x80, 0x82, 0x87, 0x8D, 0x86, 0x85, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x8F, 0x8C, 0x88, 0x8B,
				0x55, 0x81, 0x8E, 0x83, 0x8A, 0x84, 0xBD, 0x42, 0x88, 0x3C, 0x37, 0x36, 0xD6, 0xE8, 0x27, 0x4B, 0x16, 0x07, 0x36, 0x0F, 0x17, 0xD6, 0x03, 0xC4, 0x04, 0x26, 0xFA, 0x8D, 0x2D, 0x5F, 0x8D, 0x2C, 0xC6, 0x08, 0x37, 0x5F, 0x44, 0x59, 0x8D, 0x24, 0x33, 0x5A, 0x26, 0xF6, 0x8D, 0x1C, 0x32, 0x06, 0x32, 0x81, 0x0D, 0x27, 0x0B, 0x7C, 0x42, 0x2A, 0xF6, 0x42, 0x2A, 0xF1, 0x42, 0x29, 0x25, 0x07,
				0x7F, 0x42, 0x2A, 0x8D, 0x10, 0x8D, 0x0E, 0x33, 0x38, 0x39, 0xC6, 0x01, 0xD7, 0x03, 0x8D, 0x00, 0xFE, 0x42, 0x23, 0x20, 0x03, 0xFE, 0x42, 0x25, 0x7E, 0xF8, 0x61, 0xFE, 0x42, 0x80, 0x81, 0x08, 0x26, 0x0C, 0x8C, 0x40, 0x00, 0x27, 0x50, 0x86, 0x60, 0x09, 0xA7, 0x00, 0x20, 0x2E, 0x81, 0x0D, 0x26, 0x14, 0xFE, 0x42, 0x80, 0x86, 0x60, 0xA7, 0x00, 0x08, 0xFF, 0x42, 0x80, 0xF6, 0x42, 0x81,
				0xC5, 0x1F, 0x26, 0xF1, 0x20, 0x16, 0x81, 0x20, 0x25, 0x2D, 0x4D, 0x2B, 0x0C, 0x81, 0x40, 0x25, 0x06, 0x81, 0x60, 0x25, 0x04, 0x84, 0xDF, 0x88, 0x40, 0xA7, 0x00, 0x08, 0xFF, 0x42, 0x80, 0x8C, 0x42, 0x00, 0x26, 0x13, 0xCE, 0x40, 0x00, 0xEC, 0x20, 0xED, 0x00, 0x08, 0x08, 0x8C, 0x41, 0xE0, 0x26, 0xF5, 0xC6, 0x60, 0xBD, 0xFB, 0xD9, 0x32, 0x33, 0x38, 0x39, 0xBD, 0x42, 0x8B, 0x3C, 0x37,
				0x36, 0x96, 0xE8, 0x27, 0x08, 0xFE, 0x42, 0x27, 0xFC, 0x42, 0x29, 0x20, 0x0A, 0xF6, 0x42, 0x81, 0xC4, 0x1F, 0xCE, 0x10, 0x10, 0x86, 0x20, 0xDF, 0xE4, 0xD7, 0xE6, 0x97, 0xE7, 0x32, 0x33, 0x38, 0x39, 0xBD, 0xFB, 0xD4, 0xBD, 0x42, 0x91, 0x7F, 0x42, 0x7F, 0xCE, 0x42, 0xB2, 0xC6, 0x01, 0xBD, 0xF8, 0x65, 0x7D, 0x00, 0xE9, 0x26, 0x4D, 0x7D, 0x00, 0xE8, 0x26, 0x44, 0x4D, 0x2A, 0x1E, 0x7D,
				0x42, 0x3A, 0x27, 0x19, 0xBD, 0xE4, 0xB2, 0xA6, 0x00, 0x08, 0x3C, 0x36, 0x84, 0x7F, 0xDE, 0x89, 0x8D, 0x48, 0xDF, 0x89, 0x32, 0x38, 0x4D, 0x2A, 0xEE, 0xDE, 0x89, 0x20, 0xD2, 0x81, 0x0C, 0x27, 0xC0, 0x81, 0x08, 0x26, 0x08, 0x5A, 0x27, 0xBF, 0x09, 0x8D, 0x37, 0x20, 0xC2, 0x81, 0x15, 0x26, 0x0A, 0x5A, 0x27, 0xB3, 0x86, 0x08, 0xBD, 0xF9, 0xC6, 0x20, 0xF6, 0x81, 0x03, 0x0D, 0x27, 0x05,
				0x81, 0x0D, 0x26, 0x0E, 0x4F, 0x07, 0x36, 0xBD, 0xE7, 0x66, 0x6F, 0x00, 0xCE, 0x42, 0xB1, 0x32, 0x06, 0x39, 0x81, 0x20, 0x25, 0x99, 0x8D, 0x02, 0x20, 0x95, 0xC1, 0x80, 0x24, 0xF3, 0xA7, 0x00, 0x08, 0x5C, 0x7E, 0xF9, 0xC6, 0x8D, 0x43, 0x3C, 0xBD, 0xEF, 0x47, 0x38, 0xC1, 0x08, 0x22, 0x37, 0x5A, 0x2B, 0x05, 0x86, 0x10, 0x3D, 0x20, 0x08, 0xE6, 0x00, 0x2A, 0x03, 0xC4, 0x70, 0x21, 0x5F,
				0xD7, 0x82, 0x8D, 0x70, 0xA6, 0x00, 0x2B, 0x01, 0x4F, 0x84, 0x0F, 0xBA, 0x42, 0x3C, 0x9A, 0x82, 0x8A, 0x80, 0xA7, 0x00, 0x39, 0x8D, 0x13, 0x8D, 0x5B, 0x4F, 0xE6, 0x00, 0x2A, 0xF2, 0x73, 0x42, 0x3C, 0xF4, 0x42, 0x3C, 0xE7, 0x00, 0x39, 0x7E, 0xEC, 0x2E, 0xBD, 0xEA, 0x2C, 0xBD, 0xEF, 0x0D, 0xC1, 0x3F, 0x22, 0xF3, 0x37, 0xBD, 0xEF, 0x47, 0xC1, 0x1F, 0x22, 0xEB, 0x37, 0x54, 0x86, 0x20,
				0x3D, 0xC3, 0x40, 0x00, 0x37, 0x36, 0x30, 0xE6, 0x03, 0x54, 0x38, 0x3A, 0x32, 0x33, 0x84, 0x01, 0x56, 0x49, 0xC6, 0x10, 0x54, 0x4A, 0x2A, 0xFC, 0xF7, 0x42, 0x3C, 0x39, 0x8D, 0xCF, 0xC6, 0xFF, 0xA6, 0x00, 0x2A, 0x0E, 0xB4, 0x42, 0x3C, 0x27, 0x08, 0xE6, 0x00, 0x54, 0x54, 0x54, 0x54, 0xC4, 0x07, 0x5C, 0x8D, 0x03, 0x7E, 0xEA, 0x29, 0x4F, 0x5D, 0x2A, 0x01, 0x43, 0x7E, 0xEC, 0xE3, 0x27,
				0x13, 0xBD, 0xEF, 0x0D, 0xC1, 0x08, 0x22, 0x1D, 0x5D, 0x27, 0x06, 0x5A, 0x86, 0x10, 0x3D, 0xCA, 0x0F, 0xCA, 0x80, 0x8C, 0xC6, 0x60, 0xCE, 0x40, 0x00, 0xFF, 0x42, 0x80, 0xE7, 0x00, 0x08, 0x8C, 0x42, 0x00, 0x26, 0xF8, 0x39, 0x8D, 0xED, 0xCE, 0xF8, 0x33, 0x7E, 0xE7, 0xA8, 0xB6, 0x42, 0x7F, 0x26, 0x03, 0xBD, 0xF8, 0x83, 0x7F, 0x42, 0x7F, 0x97, 0xCD, 0x27, 0x03, 0x7E, 0xEE, 0x91, 0x97,
				0xD0, 0x7E, 0xEE, 0x9D, 0x27, 0x06, 0xBD, 0xEF, 0x4C, 0xFF, 0x42, 0x1F, 0xFE, 0x42, 0x1F, 0x6E, 0x00, 0xDE, 0x99, 0x3C, 0xBD, 0xEB, 0x1B, 0xBD, 0xEA, 0x29, 0xDF, 0x89, 0x38, 0xDC, 0x89, 0x9C, 0x99, 0x27, 0x03, 0x7E, 0xEC, 0x2E, 0x7E, 0xEC, 0xE3, 0xBD, 0xEB, 0xBA, 0x83, 0x01, 0xFF, 0x23, 0x03, 0x7E, 0xEC, 0x2E, 0xC3, 0x41, 0xFF, 0xFD, 0x42, 0x80, 0x39, 0xDE, 0x93, 0xFF, 0x42, 0x6F,
				0xDE, 0x95, 0xFF, 0x42, 0x71, 0x5F, 0x81, 0xA9, 0x26, 0x05, 0xBD, 0xFD, 0xDB, 0xC6, 0x04, 0xF7, 0x42, 0x67, 0xFC, 0x42, 0x71, 0xB3, 0x42, 0x6F, 0xFD, 0x42, 0x6C, 0x8D, 0x2E, 0xFE, 0x42, 0x6F, 0xFF, 0x42, 0x78, 0x86, 0xFF, 0xB7, 0x42, 0x76, 0xFC, 0x42, 0x71, 0xB3, 0x42, 0x78, 0x23, 0x0E, 0x4D, 0x26, 0x07, 0xC1, 0xFF, 0x27, 0x03, 0xF7, 0x42, 0x76, 0x8D, 0x44, 0x20, 0xE2, 0x70, 0x42,
				0x75, 0x7F, 0x42, 0x76, 0x8D, 0x3A, 0x86, 0x01, 0x97, 0x03, 0x39, 0xBD, 0xFD, 0x29, 0xCE, 0x42, 0x5F, 0xFF, 0x42, 0x78, 0xDF, 0xBF, 0x6F, 0x09, 0x6F, 0x0A, 0xCE, 0x42, 0x57, 0xC6, 0x08, 0xBD, 0xF7, 0xB2, 0x7F, 0x42, 0x75, 0x86, 0x0F, 0xB7, 0x42, 0x76, 0x8D, 0x0B, 0x8D, 0x12, 0x7C, 0x42, 0x75, 0xCE, 0x00, 0x00, 0xBD, 0xF8, 0x61, 0xFE, 0x42, 0x2F, 0x8D, 0x45, 0x09, 0x26, 0xFB, 0x39,
				0x01, 0x0F, 0xF6, 0x42, 0x76, 0xF7, 0x42, 0x7B, 0xB6, 0x42, 0x76, 0x27, 0x09, 0xFE, 0x42, 0x78, 0xAB, 0x00, 0x08, 0x5A, 0x26, 0xFA, 0xBB, 0x42, 0x75, 0xB7, 0x42, 0x7A, 0xFE, 0x42, 0x78, 0x8D, 0x20, 0x86, 0x3C, 0x8D, 0x1E, 0xB6, 0x42, 0x75, 0x8D, 0x19, 0xB6, 0x42, 0x76, 0x8D, 0x14, 0x4D, 0x27, 0x0A, 0xA6, 0x00, 0x08, 0x8D, 0x0C, 0x7A, 0x42, 0x7B, 0x26, 0xF6, 0xB6, 0x42, 0x7A, 0x8D,
				0x02, 0x86, 0x55, 0x3C, 0x36, 0x36, 0xC6, 0x08, 0x30, 0x64, 0x00, 0xCE, 0x00, 0x20, 0x25, 0x03, 0xCE, 0x00, 0x40, 0x3C, 0x86, 0x01, 0x97, 0x03, 0x09, 0x26, 0xFD, 0x4F, 0x97, 0x03, 0x38, 0x09, 0x26, 0xFD, 0x5A, 0x26, 0xE3, 0x32, 0x32, 0x38, 0x39, 0x8D, 0x08, 0xBD, 0x00, 0xF3, 0x27, 0xF8, 0x7E, 0xEA, 0x3C, 0xCE, 0x42, 0x56, 0x6F, 0x00, 0x86, 0x20, 0x08, 0xA7, 0x00, 0x8C, 0x42, 0x5F,
				0x26, 0xF8, 0xBD, 0x00, 0xF3, 0x27, 0xE1, 0xBD, 0xE9, 0x1A, 0xBD, 0xEE, 0x53, 0xF7, 0x42, 0x56, 0x27, 0xD6, 0x37, 0xCC, 0x42, 0x57, 0xDD, 0xBF, 0x33, 0x7E, 0xF7, 0xB2, 0x81, 0xA9, 0x26, 0x03, 0x7E, 0xFD, 0xB1, 0x81, 0x4D, 0x26, 0x03, 0x7E, 0xFE, 0x06, 0x4F, 0x8D, 0x22, 0xBD, 0xE3, 0xCF, 0x73, 0x42, 0x6E, 0xFC, 0x42, 0x6C, 0xD3, 0x93, 0xBD, 0xE2, 0x1E, 0xDE, 0x93, 0xFF, 0x42, 0x78,
				0x8D, 0x4E, 0x2A, 0xF9, 0xDF, 0x95, 0xCE, 0xE1, 0xBB, 0xBD, 0xE7, 0xA8, 0x7E, 0xE2, 0xEB, 0x36, 0x8D, 0x10, 0x32, 0x7D, 0x42, 0x74, 0x26, 0x37, 0xB1, 0x42, 0x67, 0x27, 0x32, 0xC6, 0x24, 0x7E, 0xE2, 0x38, 0x8D, 0x8F, 0xBD, 0xFE, 0x37, 0x26, 0x03, 0x7E, 0xFF, 0x4E, 0xC6, 0x22, 0x7E, 0xE2, 0x38, 0x8D, 0x28, 0x86, 0x04, 0x8D, 0xD8, 0xFC, 0x42, 0x71, 0xB3, 0x42, 0x6F, 0xB3, 0x42, 0x6C,
				0x24, 0x03, 0x7E, 0xE2, 0x36, 0xFE, 0x42, 0x6F, 0xFF, 0x42, 0x78, 0x8D, 0x03, 0x2A, 0xF9, 0x39, 0xBD, 0xFE, 0xB6, 0x26, 0xD7, 0xB6, 0x42, 0x75, 0x27, 0xD2, 0x39, 0xBD, 0x00, 0xEB, 0xC6, 0x01, 0xD7, 0x86, 0xBD, 0xEB, 0x1B, 0x7F, 0x00, 0x86, 0xBD, 0xE9, 0x0E, 0xEC, 0x02, 0xBD, 0xE2, 0x2D, 0xFF, 0x42, 0x71, 0xDE, 0x89, 0xE6, 0x04, 0x58, 0xCB, 0x05, 0x3A, 0xFF, 0x42, 0x6F, 0xBD, 0x00,
				0xF3, 0x27, 0xCC, 0x7E, 0xEA, 0x2F, 0xBD, 0x00, 0xEB, 0x86, 0x02, 0x8D, 0x82, 0xCE, 0x00, 0x00, 0xBD, 0x00, 0xF3, 0x27, 0x06, 0xBD, 0xEA, 0x2F, 0xBD, 0xEF, 0x4C, 0xDF, 0x89, 0xFC, 0x42, 0x6A, 0xD3, 0x89, 0xFD, 0x42, 0x1F, 0xFC, 0x42, 0x6C, 0xD3, 0x89, 0x37, 0x36, 0x38, 0x20, 0x99, 0xBD, 0xFD, 0xA2, 0x8D, 0x56, 0x26, 0x9D, 0x39, 0x96, 0xE2, 0x4C, 0x26, 0x0A, 0xBD, 0xFB, 0xD4, 0x86,
				0x53, 0x8D, 0x3E, 0xBD, 0xE7, 0xB9, 0x8D, 0x62, 0xBA, 0x42, 0x75, 0x26, 0x33, 0x5F, 0x37, 0xCE, 0x42, 0x5F, 0x3A, 0xA6, 0x00, 0xDE, 0xE2, 0x08, 0x26, 0x02, 0x8D, 0x25, 0xCE, 0x42, 0x57, 0x3A, 0xA0, 0x00, 0x30, 0xAA, 0x00, 0xA7, 0x00, 0x5C, 0xC1, 0x08, 0x26, 0xE3, 0x32, 0x4D, 0x27, 0x0B, 0x7D, 0x42, 0x56, 0x27, 0x06, 0x8D, 0x10, 0x26, 0x07, 0x20, 0xBC, 0x86, 0x46, 0x8D, 0x22, 0x4F,
				0x39, 0x7F, 0x00, 0xE8, 0x7E, 0xF9, 0xC6, 0xBD, 0xFF, 0x4E, 0x86, 0xFF, 0x16, 0x8D, 0x2A, 0x26, 0x07, 0xB6, 0x42, 0x75, 0x40, 0x2B, 0xF3, 0x4A, 0xB7, 0x42, 0x7B, 0x39, 0xB6, 0x40, 0x00, 0x88, 0x40, 0xD6, 0xE2, 0x5C, 0x26, 0x03, 0xB7, 0x40, 0x00, 0x39, 0xBD, 0xFF, 0x4E, 0xCE, 0x42, 0x5F, 0xFF, 0x42, 0x78, 0x86, 0x0F, 0x8C, 0x86, 0xFF, 0x5F, 0x36, 0xF7, 0x42, 0x73, 0x01, 0x0F, 0x8D,
				0xDB, 0xFE, 0x42, 0x78, 0x4F, 0x8D, 0x5B, 0x46, 0x81, 0x3C, 0x26, 0xF9, 0x8D, 0x46, 0xB7, 0x42, 0x75, 0x8D, 0x41, 0xB7, 0x42, 0x76, 0x33, 0x11, 0x22, 0x31, 0xBB, 0x42, 0x75, 0xB7, 0x42, 0x7A, 0xB6, 0x42, 0x76, 0xB7, 0x42, 0x7B, 0x27, 0x19, 0x8D, 0x2A, 0x7D, 0x42, 0x73, 0x26, 0x07, 0xA7, 0x00, 0xA1, 0x00, 0x26, 0x19, 0x08, 0xBB, 0x42, 0x7A, 0xB7, 0x42, 0x7A, 0x7A, 0x42, 0x7B, 0x26,
				0xE7, 0x8D, 0x11, 0xB0, 0x42, 0x7A, 0x27, 0x08, 0x86, 0x01, 0x8C, 0x86, 0x03, 0x8C, 0x86, 0x02, 0xB7, 0x42, 0x7B, 0x39, 0x86, 0x08, 0xB7, 0x42, 0x7C, 0x8D, 0x07, 0x46, 0x7A, 0x42, 0x7C, 0x26, 0xF8, 0x39, 0x8D, 0x08, 0xF6, 0x42, 0x7D, 0x5A, 0xF1, 0x42, 0x2C, 0x39, 0x7F, 0x42, 0x7D, 0x7D, 0x42, 0x7E, 0x26, 0x11, 0x8D, 0x07, 0x26, 0xFC, 0x8D, 0x03, 0x27, 0xFC, 0x39, 0x7C, 0x42, 0x7D,
				0xD6, 0x03, 0xC4, 0x10, 0x39, 0x8D, 0xF6, 0x27, 0xFC, 0x8D, 0xF2, 0x26, 0xFC, 0x39, 0x01, 0x0F, 0x7F, 0x42, 0x7C, 0x8D, 0xDF, 0x8D, 0x2D, 0x22, 0x12, 0x8D, 0x22, 0x25, 0x12, 0x7A, 0x42, 0x7C, 0xB6, 0x42, 0x7C, 0x81, 0xA0, 0x26, 0xEC, 0xB7, 0x42, 0x7E, 0x39, 0x8D, 0x10, 0x22, 0xE6, 0x8D, 0x13, 0x25, 0xE6, 0x7C, 0x42, 0x7C, 0xB6, 0x42, 0x7C, 0x80, 0x60, 0x20, 0xE8, 0x7F, 0x42, 0x7D,
				0x8D, 0xB6, 0x20, 0x05, 0x7F, 0x42, 0x7D, 0x8D, 0xC0, 0xF6, 0x42, 0x7D, 0xF1, 0x42, 0x2D, 0x22, 0x04, 0xF1, 0x42, 0x2E, 0x39, 0x7F, 0x42, 0x7C, 0x39, 0xBD, 0xEA, 0x2F, 0xBD, 0xEF, 0x0D, 0x5D, 0x26, 0x2F, 0x7E, 0xEC, 0x2E, 0x8D, 0xF5, 0x37, 0x8D, 0xEF, 0x32, 0x36, 0x37, 0x4F, 0xDE, 0x09, 0xD6, 0x08, 0xDF, 0x0B, 0x88, 0x80, 0xB7, 0xBF, 0xFF, 0x30, 0xE6, 0x01, 0x08, 0x08, 0x5C, 0x26,
				0xFB, 0xD6, 0x08, 0xC4, 0x40, 0x27, 0xED, 0x30, 0x6A, 0x00, 0x26, 0xE2, 0x4F, 0xB7, 0xBF, 0xFF, 0x38, 0x39, 0x6E, 0x69, 0x6C, 0x72, 0x65, 0x62, 0x6D, 0x61, 0x68, 0x43, 0xF8, 0x83, 0xF9, 0xC6, 0xFF, 0x4E, 0xFE, 0xB9, 0xFC, 0xC0, 0xFF, 0xAB, 0xFC, 0xB7, 0xEC, 0xE3, 0xEB, 0xC7, 0x00, 0xC9, 0x42, 0x00, 0x42, 0x03, 0x42, 0x06, 0x42, 0x09, 0x42, 0x0C, 0x42, 0x0F, 0x42, 0x12, 0xF7, 0x2E
			};
		}

		public void Init() 
		{
			//// this.memoryBuffer = new ArrayBuffer(0xC000);
			this.Memory = new byte[0xC000]; // new Uint8Array(this.memoryBuffer);

			//// this.port1Buffer = new ArrayBuffer(8);
			this.Port1 = new byte[8]; // new Uint8Array(this.port1Buffer);

			////  this.port2Buffer = new ArrayBuffer(8);
			this.Port2 = new byte[8]; // new Uint8Array(this.port2Buffer);

			this.cycleCount = 0;

			//this.printBuffer = new Array();
			this.irqState = new int[10]; // Array<Int>();  //JAR_NOTE; HOW LARGE??

			this.waiState = 0;
			this.nmiState = 0;
			this.extraCycles = 0;
			this.irq2 = 0;
			this.pendingTCSR = 0;

			// this.REG_ACC = new Uint8Array(this.accumBuffer);
			// this.REG_D = new Uint16Array(this.accumBuffer);
			// this.REG_B = this.REG_ACC.subarray(0, 1);
			// this.REG_A = this.REG_ACC.subarray(1, 2);

			for (int i = 0; i < 0xC000; i++)
				this.Memory[i] = 0x00;

			for (int i = 0; i < 8; i++)
			{
				this.Port1[i] = 0xFF;
				this.Port2[i] = 0xFF;
			}

			this.irqState[this.IRQ_LINE] = 0;
			this.irqState[this.TIN_LINE] = 0;

			this.F_CARRY = 0;
			this.F_OVERFLOW = 0;
			this.F_ZERO = 0;
			this.F_SIGN = 0;
			this.F_INTERRUPT = 0;
			this.F_HALFCARRY = 0;

			this.REG_D = 0;
			this.REG_SP = 0;
			this.REG_IP = 0;

			this.InitTable();

			this.Reset();
		}

		public void Reset() 
		{
			this.REG_PC = (this.FetchMemory(0xFFFE) << 8) + this.FetchMemory(0xFFFF);

			this.SEI(); // IRQ disabled

			this.Memory[0x0b] = 0xFF; // output compare register defaults
			this.Memory[0x0c] = 0xFF;
			this.Memory[0x11] = 0x20; // transmit control status registers

			this.waiState = 0;
			this.nmiState = 0;
			this.irqState[this.IRQ_LINE] = 0;
			this.irqState[this.TIN_LINE] = 0;
			this.irq2 = 0;
			this.pendingTCSR = 0;
			this.cycleCount = 0;
		}

		public int Emulate() 
		{
			var lastpc = this.REG_PC;

			if ((this.waiState & this.WAI_) != 0)
			{
				Console.WriteLine("IN WAI");
				this.cycleCount = (this.cycleCount + 1) & 0xFFFF;
				this.CheckTimer();
				return 1;
			}

			var opcode = this.FetchOpCode();

			if (opcode < this.optable.Length)
			{
				var cycles = this.optable[opcode]();

				for (var i = 0; i < cycles; i++) 
				{
					this.cycleCount = (this.cycleCount + 1) & 0xFFFF;
					this.CheckTimer();
				}

				//  var cc = this.flagsToVariable();
				//  this.history.push({ OP: opcode.toString(16), last_PC: lastpc, PC: this.REG_PC, D: this.REG_D, X: this.REG_IP, S: this.REG_SP, CC: cc });
				//  this.idx++;

				this.cycleCount += this.extraCycles;
				this.extraCycles = 0;

				return cycles;
			}

			//  this.checkIRQLines();

			Console.WriteLine("unknown opcode: " + opcode);
			return 0;
		}

		public void CheckTimer() 
		{
			// TODO: input capture interrupt

			/*
			 * Output compare
			 */
			if (this.cycleCount == (this.Memory[0x0b] << 8) + (this.Memory[0x0c] & 0xFF))
			{
				this.Memory[0x08] |= (byte)this.TCSR_OCF; // set OCF (output compare flag)
				this.pendingTCSR |= this.TCSR_OCF;
				this.ModifiedTCSR();
				if (this.F_INTERRUPT == 0 && ((this.Memory[0x08] & this.TCSR_EOCI) != 0))
					this.TakeOCI();

			}

			/*
			 * Timer overflow
			*/
			if (this.cycleCount == 0xFFFF)
			{
				this.Memory[0x08] |= (byte)this.TCSR_TOF; // set TOF (timer overflow flag)
				this.pendingTCSR |= this.TCSR_TOF;
				this.ModifiedTCSR();
				if (this.F_INTERRUPT == 0 && ((this.Memory[0x08] & this.TCSR_ETOI) != 0))
					this.TakeTOI();
			}
		}

		public void Interrupt(int vector) 
		{
			if ((this.waiState & (this.WAI_ | this.SLP)) != 0)
			{
				if ((this.waiState & this.WAI_) != 0)
				{
					this.extraCycles += 4;
				}
				this.waiState &= ~(this.WAI_ | this.SLP);
			}
			else
			{
				this.PushStack16(this.REG_PC);
				this.PushStack16(this.REG_IP);
				this.PushStack(this.REG_A);
				this.PushStack(this.REG_B);
				this.PushStack(this.FlagsToVariable());
				this.extraCycles += 12;
			}
			this.SEI();

			this.REG_PC = vector;
			this.REG_PC &= 0xFFFF;
		}

		////checkIRQLines: function () [[
		////    if (this.F_INTERRUPT == 0) [[
		////        if (this.irqState[this.IRQ_LINE] != this.CLEAR_LINE) [[
		////            this.interrupt(0xFFf8);
		////        ]] else [[
		////            this.checkIRQ2();
		////        ]]
		////    ]]
		////]],

		////checkIRQ2: function () [[
		////    //if ((this.irq2 & this.TCSR_ICF) != 0) [[
		////    //    this.takeICI();
		////    //]] else if ((this.irq2 & this.TCSR_OCF) != 0) [[
		////    //    this.takeOCI();
		////    //]] else if ((this.irq2 & this.TCSR_TOF) != 0) [[
		////    //    this.takeTOI();
		////    //]]
		////]],

		public void TakeICI() 
		{
			this.Interrupt(0x4209);
		}

		public void TakeOCI() 
		{
			this.Interrupt(0x4206);
		}

		public void TakeTOI() 
		{
			this.Interrupt(0x4203);
		}

		public void TakeSCI() 
		{
			this.Interrupt(0x4200);
		}

		public void TakeTRAP() 
		{
			this.Interrupt(0xF72E);
		}

		public void ModifiedTCSR() 
		{
			//this.irq2 = (this.memory[0x08] & (this.memory[0x08] << 3)) & (this.TCSR_ICF | this.TCSR_OCF | this.TCSR_TOF);
			this.irq2 = (this.Memory[0x08] & (this.TCSR_ICF | this.TCSR_OCF | this.TCSR_TOF));
		}

		public void InitTable() 
		{
			var self = this;

			//ABA
			this.optable[0x1b] = delegate () { self.memmode = MC6803.INHERENT; self.ABA(); return 2; };

			//ABX
			this.optable[0x3a] = delegate () { self.memmode = MC6803.INHERENT; self.ABX(); return 3; };

			//ADCA
			this.optable[0x89] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ADCA(); return 2; };
			this.optable[0x99] = delegate () { self.memmode = MC6803.DIRECT; self.ADCA(); return 3; };
			this.optable[0xa9] = delegate () { self.memmode = MC6803.INDEX; self.ADCA(); return 4; };
			this.optable[0xb9] = delegate () { self.memmode = MC6803.EXTENDED; self.ADCA(); return 4; };

			//ADCB 
			this.optable[0xc9] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ADCB(); return 2; };
			this.optable[0xd9] = delegate () { self.memmode = MC6803.DIRECT; self.ADCB(); return 3; };
			this.optable[0xe9] = delegate () { self.memmode = MC6803.INDEX; self.ADCB(); return 4; };
			this.optable[0xf9] = delegate () { self.memmode = MC6803.EXTENDED; self.ADCB(); return 4; };

			//ADDA 
			this.optable[0x8b] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ADDA(); return 2; };
			this.optable[0x9b] = delegate () { self.memmode = MC6803.DIRECT; self.ADDA(); return 3; };
			this.optable[0xab] = delegate () { self.memmode = MC6803.INDEX; self.ADDA(); return 4; };
			this.optable[0xbb] = delegate () { self.memmode = MC6803.EXTENDED; self.ADDA(); return 4; };

			//ADDB 
			this.optable[0xcb] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ADDB(); return 2; };
			this.optable[0xdb] = delegate () { self.memmode = MC6803.DIRECT; self.ADDB(); return 3; };
			this.optable[0xeb] = delegate () { self.memmode = MC6803.INDEX; self.ADDB(); return 4; };
			this.optable[0xfb] = delegate () { self.memmode = MC6803.EXTENDED; self.ADDB(); return 4; };

			//ADDD 
			this.optable[0xc3] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ADDD(); return 4; };
			this.optable[0xd3] = delegate () { self.memmode = MC6803.DIRECT; self.ADDD(); return 5; };
			this.optable[0xe3] = delegate () { self.memmode = MC6803.INDEX; self.ADDD(); return 6; };
			this.optable[0xf3] = delegate () { self.memmode = MC6803.EXTENDED; self.ADDD(); return 6; };

			//ANDA 
			this.optable[0x84] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ANDA(); return 2; };
			this.optable[0x94] = delegate () { self.memmode = MC6803.DIRECT; self.ANDA(); return 3; };
			this.optable[0xa4] = delegate () { self.memmode = MC6803.INDEX; self.ANDA(); return 4; };
			this.optable[0xb4] = delegate () { self.memmode = MC6803.EXTENDED; self.ANDA(); return 4; };

			//ANDB 
			this.optable[0xc4] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ANDB(); return 2; };
			this.optable[0xd4] = delegate () { self.memmode = MC6803.DIRECT; self.ANDB(); return 3; };
			this.optable[0xe4] = delegate () { self.memmode = MC6803.INDEX; self.ANDB(); return 4; };
			this.optable[0xf4] = delegate () { self.memmode = MC6803.EXTENDED; self.ANDB(); return 4; };

			//ASL 
			this.optable[0x68] = delegate () { self.memmode = MC6803.INDEX; self.ASL(); return 6; };
			this.optable[0x78] = delegate () { self.memmode = MC6803.EXTENDED; self.ASL(); return 6; };

			//ASLA 
			this.optable[0x48] = delegate () { self.memmode = MC6803.INHERENT; self.ASLA(); return 2; };

			//ASLB 
			this.optable[0x58] = delegate () { self.memmode = MC6803.INHERENT; self.ASLB(); return 2; };

			//ASLD 
			this.optable[0x05] = delegate () { self.memmode = MC6803.INHERENT; self.ASLD(); return 3; };

			//ASR 
			this.optable[0x67] = delegate () { self.memmode = MC6803.INDEX; self.ASR(); return 6; };
			this.optable[0x77] = delegate () { self.memmode = MC6803.EXTENDED; self.ASR(); return 6; };

			//ASRA 
			this.optable[0x47] = delegate () { self.memmode = MC6803.INHERENT; self.ASRA(); return 2; };

			//ASRB 
			this.optable[0x57] = delegate () { self.memmode = MC6803.INHERENT; self.ASRB(); return 2; };

			//BRA 
			this.optable[0x20] = delegate () { self.memmode = MC6803.RELATIVE; self.BRA(); return 3; };

			//BRN 
			this.optable[0x21] = delegate () { self.memmode = MC6803.RELATIVE; self.BRN(); return 3; };

			//BCC 
			this.optable[0x24] = delegate () { self.memmode = MC6803.RELATIVE; self.BCC(); return 3; };

			//BCS 
			this.optable[0x25] = delegate () { self.memmode = MC6803.RELATIVE; self.BCS(); return 3; };

			//BEQ	
			this.optable[0x27] = delegate () { self.memmode = MC6803.RELATIVE; self.BEQ(); return 3; };

			//BGE	
			this.optable[0x2c] = delegate () { self.memmode = MC6803.RELATIVE; self.BGE(); return 3; };

			//BGT	
			this.optable[0x2e] = delegate () { self.memmode = MC6803.RELATIVE; self.BGT(); return 3; };

			//BHI	
			this.optable[0x22] = delegate () { self.memmode = MC6803.RELATIVE; self.BHI(); return 3; };

			//BLE	
			this.optable[0x2f] = delegate () { self.memmode = MC6803.RELATIVE; self.BLE(); return 3; };

			//BLS	
			this.optable[0x23] = delegate () { self.memmode = MC6803.RELATIVE; self.BLS(); return 3; };

			//BLT	
			this.optable[0x2d] = delegate () { self.memmode = MC6803.RELATIVE; self.BLT(); return 3; };

			//BMI	
			this.optable[0x2b] = delegate () { self.memmode = MC6803.RELATIVE; self.BMI(); return 3; };

			//BNE	
			this.optable[0x26] = delegate () { self.memmode = MC6803.RELATIVE; self.BNE(); return 3; };

			//BVC	
			this.optable[0x28] = delegate () { self.memmode = MC6803.RELATIVE; self.BVC(); return 3; };

			//BVS	
			this.optable[0x29] = delegate () { self.memmode = MC6803.RELATIVE; self.BVS(); return 3; };

			//BPL	
			this.optable[0x2a] = delegate () { self.memmode = MC6803.RELATIVE; self.BPL(); return 3; };

			//BSR	
			this.optable[0x8d] = delegate () { self.memmode = MC6803.RELATIVE; self.BSR(); return 6; };

			//BITA	
			this.optable[0x85] = delegate () { self.memmode = MC6803.IMMEDIATE; self.BITA(); return 2; };
			this.optable[0x95] = delegate () { self.memmode = MC6803.DIRECT; self.BITA(); return 3; };
			this.optable[0xa5] = delegate () { self.memmode = MC6803.INDEX; self.BITA(); return 4; };
			this.optable[0xb5] = delegate () { self.memmode = MC6803.EXTENDED; self.BITA(); return 4; };

			//BITB	
			this.optable[0xc5] = delegate () { self.memmode = MC6803.IMMEDIATE; self.BITB(); return 2; };
			this.optable[0xd5] = delegate () { self.memmode = MC6803.DIRECT; self.BITB(); return 3; };
			this.optable[0xe5] = delegate () { self.memmode = MC6803.INDEX; self.BITB(); return 4; };
			this.optable[0xf5] = delegate () { self.memmode = MC6803.EXTENDED; self.BITB(); return 4; };

			//CBA	
			this.optable[0x11] = delegate () { self.memmode = MC6803.INHERENT; self.CBA(); return 2; };

			//CLC	
			this.optable[0x0c] = delegate () { self.memmode = MC6803.INHERENT; self.CLC(); return 2; };

			//CLI	
			this.optable[0x0e] = delegate () { self.memmode = MC6803.INHERENT; self.CLI(); return 2; };

			//CLR	
			this.optable[0x6f] = delegate () { self.memmode = MC6803.INDEX; self.CLR(); return 6; };
			this.optable[0x7f] = delegate () { self.memmode = MC6803.EXTENDED; self.CLR(); return 6; };

			//CLRA	
			this.optable[0x4f] = delegate () { self.memmode = MC6803.INHERENT; self.CLRA(); return 2; };

			//CLRB	
			this.optable[0x5f] = delegate () { self.memmode = MC6803.INHERENT; self.CLRB(); return 2; };

			//CLV	
			this.optable[0x0a] = delegate () { self.memmode = MC6803.INHERENT; self.CLV(); return 2; };

			//CMPA	
			this.optable[0x81] = delegate () { self.memmode = MC6803.IMMEDIATE; self.CMPA(); return 2; };
			this.optable[0x91] = delegate () { self.memmode = MC6803.DIRECT; self.CMPA(); return 3; };
			this.optable[0xa1] = delegate () { self.memmode = MC6803.INDEX; self.CMPA(); return 4; };
			this.optable[0xb1] = delegate () { self.memmode = MC6803.EXTENDED; self.CMPA(); return 4; };

			//CMPB	
			this.optable[0xc1] = delegate () { self.memmode = MC6803.IMMEDIATE; self.CMPB(); return 2; };
			this.optable[0xd1] = delegate () { self.memmode = MC6803.DIRECT; self.CMPB(); return 3; };
			this.optable[0xe1] = delegate () { self.memmode = MC6803.INDEX; self.CMPB(); return 4; };
			this.optable[0xf1] = delegate () { self.memmode = MC6803.EXTENDED; self.CMPB(); return 4; };

			//COM	
			this.optable[0x63] = delegate () { self.memmode = MC6803.INDEX; self.COM(); return 6; };
			this.optable[0x73] = delegate () { self.memmode = MC6803.EXTENDED; self.COM(); return 6; };

			//COMA	
			this.optable[0x43] = delegate () { self.memmode = MC6803.INHERENT; self.COMA(); return 2; };

			//COMB	
			this.optable[0x53] = delegate () { self.memmode = MC6803.INHERENT; self.COMB(); return 2; };

			//CPX	
			this.optable[0x8c] = delegate () { self.memmode = MC6803.IMMEDIATE; self.CPX(); return 4; };
			this.optable[0x9c] = delegate () { self.memmode = MC6803.DIRECT; self.CPX(); return 5; };
			this.optable[0xac] = delegate () { self.memmode = MC6803.INDEX; self.CPX(); return 6; };
			this.optable[0xbc] = delegate () { self.memmode = MC6803.EXTENDED; self.CPX(); return 6; };

			//DAA	
			this.optable[0x19] = delegate () { self.memmode = MC6803.INHERENT; self.DAA(); return 2; };

			//DEC	
			this.optable[0x6a] = delegate () { self.memmode = MC6803.INDEX; self.DEC(); return 6; };
			this.optable[0x7a] = delegate () { self.memmode = MC6803.EXTENDED; self.DEC(); return 6; };

			//DECA	
			this.optable[0x4a] = delegate () { self.memmode = MC6803.INHERENT; self.DECA(); return 2; };

			//DECB	
			this.optable[0x5a] = delegate () { self.memmode = MC6803.INHERENT; self.DECB(); return 2; };

			//DES	
			this.optable[0x34] = delegate () { self.memmode = MC6803.INHERENT; self.DES(); return 3; };

			//DEX	
			this.optable[0x09] = delegate () { self.memmode = MC6803.INHERENT; self.DEX(); return 3; };

			//EORA	
			this.optable[0x88] = delegate () { self.memmode = MC6803.IMMEDIATE; self.EORA(); return 2; };
			this.optable[0x98] = delegate () { self.memmode = MC6803.DIRECT; self.EORA(); return 3; };
			this.optable[0xa8] = delegate () { self.memmode = MC6803.INDEX; self.EORA(); return 4; };
			this.optable[0xb8] = delegate () { self.memmode = MC6803.EXTENDED; self.EORA(); return 4; };

			//EORB	
			this.optable[0xc8] = delegate () { self.memmode = MC6803.IMMEDIATE; self.EORB(); return 2; };
			this.optable[0xd8] = delegate () { self.memmode = MC6803.DIRECT; self.EORB(); return 3; };
			this.optable[0xe8] = delegate () { self.memmode = MC6803.INDEX; self.EORB(); return 4; };
			this.optable[0xf8] = delegate () { self.memmode = MC6803.EXTENDED; self.EORB(); return 4; };

			//INC	
			this.optable[0x6c] = delegate () { self.memmode = MC6803.INDEX; self.INC(); return 6; };
			this.optable[0x7c] = delegate () { self.memmode = MC6803.EXTENDED; self.INC(); return 6; };

			//INCA	
			this.optable[0x4c] = delegate () { self.memmode = MC6803.INHERENT; self.INCA(); return 2; };

			//INCB	
			this.optable[0x5c] = delegate () { self.memmode = MC6803.INHERENT; self.INCB(); return 2; };

			//INS	
			this.optable[0x31] = delegate () { self.memmode = MC6803.INHERENT; self.INS(); return 3; };

			//INX	
			this.optable[0x08] = delegate () { self.memmode = MC6803.INHERENT; self.INX(); return 3; };

			//JMP	
			this.optable[0x6e] = delegate () { self.memmode = MC6803.INDEX; self.JMP(); return 3; };
			this.optable[0x7e] = delegate () { self.memmode = MC6803.EXTENDED; self.JMP(); return 3; };

			//JSR	
			this.optable[0x9d] = delegate () { self.memmode = MC6803.DIRECT; self.JSR(); return 5; };
			this.optable[0xad] = delegate () { self.memmode = MC6803.INDEX; self.JSR(); return 6; };
			this.optable[0xbd] = delegate () { self.memmode = MC6803.EXTENDED; self.JSR(); return 6; };

			//LDAA	
			this.optable[0x86] = delegate () { self.memmode = MC6803.IMMEDIATE; self.LDAA(); return 2; };
			this.optable[0x96] = delegate () { self.memmode = MC6803.DIRECT; self.LDAA(); return 3; };
			this.optable[0xa6] = delegate () { self.memmode = MC6803.INDEX; self.LDAA(); return 4; };
			this.optable[0xb6] = delegate () { self.memmode = MC6803.EXTENDED; self.LDAA(); return 4; };

			//LDAB	
			this.optable[0xc6] = delegate () { self.memmode = MC6803.IMMEDIATE; self.LDAB(); return 2; };
			this.optable[0xd6] = delegate () { self.memmode = MC6803.DIRECT; self.LDAB(); return 3; };
			this.optable[0xe6] = delegate () { self.memmode = MC6803.INDEX; self.LDAB(); return 4; };
			this.optable[0xf6] = delegate () { self.memmode = MC6803.EXTENDED; self.LDAB(); return 4; };

			//LDD	
			this.optable[0xcc] = delegate () { self.memmode = MC6803.IMMEDIATE; self.LDD(); return 3; };
			this.optable[0xdc] = delegate () { self.memmode = MC6803.DIRECT; self.LDD(); return 4; };
			this.optable[0xec] = delegate () { self.memmode = MC6803.INDEX; self.LDD(); return 5; };
			this.optable[0xfc] = delegate () { self.memmode = MC6803.EXTENDED; self.LDD(); return 5; };

			//LDS	
			this.optable[0x8e] = delegate () { self.memmode = MC6803.IMMEDIATE; self.LDS(); return 3; };
			this.optable[0x9e] = delegate () { self.memmode = MC6803.DIRECT; self.LDS(); return 4; };
			this.optable[0xae] = delegate () { self.memmode = MC6803.INDEX; self.LDS(); return 5; };
			this.optable[0xbe] = delegate () { self.memmode = MC6803.EXTENDED; self.LDS(); return 5; };

			//LDX	
			this.optable[0xce] = delegate () { self.memmode = MC6803.IMMEDIATE; self.LDX(); return 3; };
			this.optable[0xde] = delegate () { self.memmode = MC6803.DIRECT; self.LDX(); return 4; };
			this.optable[0xee] = delegate () { self.memmode = MC6803.INDEX; self.LDX(); return 5; };
			this.optable[0xfe] = delegate () { self.memmode = MC6803.EXTENDED; self.LDX(); return 5; };

			//LSR	
			this.optable[0x64] = delegate () { self.memmode = MC6803.INDEX; self.LSR(); return 6; };
			this.optable[0x74] = delegate () { self.memmode = MC6803.EXTENDED; self.LSR(); return 6; };

			//LSRA	
			this.optable[0x44] = delegate () { self.memmode = MC6803.INHERENT; self.LSRA(); return 2; };

			//LSRB	
			this.optable[0x54] = delegate () { self.memmode = MC6803.INHERENT; self.LSRB(); return 2; };

			//LSRD	
			this.optable[0x04] = delegate () { self.memmode = MC6803.INHERENT; self.LSRD(); return 3; };

			//MUL	
			this.optable[0x3d] = delegate () { self.memmode = MC6803.INHERENT; self.MUL(); return 10; };

			//NEG	
			this.optable[0x60] = delegate () { self.memmode = MC6803.INDEX; self.NEG(); return 6; };
			this.optable[0x70] = delegate () { self.memmode = MC6803.EXTENDED; self.NEG(); return 6; };

			//NEGA	
			this.optable[0x40] = delegate () { self.memmode = MC6803.INHERENT; self.NEGA(); return 2; };

			//NEGB	
			this.optable[0x50] = delegate () { self.memmode = MC6803.INHERENT; self.NEGB(); return 2; };

			//NOP	
			this.optable[0x01] = delegate () { self.memmode = MC6803.INHERENT; self.NOP(); return 2; };

			//NGC	
			this.optable[0x62] = delegate () { self.memmode = MC6803.INDEX; self.NGC(); return 6; };
			this.optable[0x72] = delegate () { self.memmode = MC6803.EXTENDED; self.NGC(); return 6; };

			//NGCA	
			this.optable[0x42] = delegate () { self.memmode = MC6803.INHERENT; self.NGCA(); return 2; };

			//NGCB	
			this.optable[0x52] = delegate () { self.memmode = MC6803.INHERENT; self.NGCB(); return 2; };

			//ORAA	
			this.optable[0x8a] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ORAA(); return 2; };
			this.optable[0x9a] = delegate () { self.memmode = MC6803.DIRECT; self.ORAA(); return 3; };
			this.optable[0xaa] = delegate () { self.memmode = MC6803.INDEX; self.ORAA(); return 4; };
			this.optable[0xba] = delegate () { self.memmode = MC6803.EXTENDED; self.ORAA(); return 4; };

			//ORAB	
			this.optable[0xca] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ORAB(); return 2; };
			this.optable[0xda] = delegate () { self.memmode = MC6803.DIRECT; self.ORAB(); return 3; };
			this.optable[0xea] = delegate () { self.memmode = MC6803.INDEX; self.ORAB(); return 4; };
			this.optable[0xfa] = delegate () { self.memmode = MC6803.EXTENDED; self.ORAB(); return 4; };

			//PSHA	
			this.optable[0x36] = delegate () { self.memmode = MC6803.INHERENT; self.PSHA(); return 3; };

			//PSHB	
			this.optable[0x37] = delegate () { self.memmode = MC6803.INHERENT; self.PSHB(); return 3; };

			//PSHX	
			this.optable[0x3c] = delegate () { self.memmode = MC6803.INHERENT; self.PSHX(); return 4; };

			//PULA	
			this.optable[0x32] = delegate () { self.memmode = MC6803.INHERENT; self.PULA(); return 4; };

			//PULB	
			this.optable[0x33] = delegate () { self.memmode = MC6803.INHERENT; self.PULB(); return 4; };

			//PULX	
			this.optable[0x38] = delegate () { self.memmode = MC6803.INHERENT; self.PULX(); return 5; };

			//ROL	
			this.optable[0x69] = delegate () { self.memmode = MC6803.INDEX; self.ROL(); return 6; };
			this.optable[0x79] = delegate () { self.memmode = MC6803.EXTENDED; self.ROL(); return 6; };

			//ROLA	
			this.optable[0x49] = delegate () { self.memmode = MC6803.INHERENT; self.ROLA(); return 2; };

			//ROLB	
			this.optable[0x59] = delegate () { self.memmode = MC6803.INHERENT; self.ROLB(); return 2; };

			//ROR	
			this.optable[0x66] = delegate () { self.memmode = MC6803.INDEX; self.ROR(); return 6; };
			this.optable[0x76] = delegate () { self.memmode = MC6803.EXTENDED; self.ROR(); return 6; };

			//RORA	
			this.optable[0x46] = delegate () { self.memmode = MC6803.INHERENT; self.RORA(); return 2; };

			//RORB	
			this.optable[0x56] = delegate () { self.memmode = MC6803.INHERENT; self.RORB(); return 2; };

			//RTI	
			this.optable[0x3b] = delegate () { self.memmode = MC6803.INHERENT; self.RTI(); return 10; };

			//RTS
			this.optable[0x39] = delegate () { self.memmode = MC6803.INHERENT; self.RTS(); return 5; };

			//SBA
			this.optable[0x10] = delegate () { self.memmode = MC6803.INHERENT; self.SBA(); return 2; };

			//SBCA
			this.optable[0x82] = delegate () { self.memmode = MC6803.IMMEDIATE; self.SBCA(); return 2; };
			this.optable[0x92] = delegate () { self.memmode = MC6803.DIRECT; self.SBCA(); return 3; };
			this.optable[0xa2] = delegate () { self.memmode = MC6803.INDEX; self.SBCA(); return 4; };
			this.optable[0xb2] = delegate () { self.memmode = MC6803.EXTENDED; self.SBCA(); return 4; };

			//SBCB
			this.optable[0xc2] = delegate () { self.memmode = MC6803.IMMEDIATE; self.SBCB(); return 2; };
			this.optable[0xd2] = delegate () { self.memmode = MC6803.DIRECT; self.SBCB(); return 3; };
			this.optable[0xe2] = delegate () { self.memmode = MC6803.INDEX; self.SBCB(); return 4; };
			this.optable[0xf2] = delegate () { self.memmode = MC6803.EXTENDED; self.SBCB(); return 4; };

			//SEC
			this.optable[0x0d] = delegate () { self.memmode = MC6803.INHERENT; self.SCC(); return 2; };

			//SEI	
			this.optable[0x0f] = delegate () { self.memmode = MC6803.INHERENT; self.SEI(); return 2; };

			//SEV	
			this.optable[0x0b] = delegate () { self.memmode = MC6803.INHERENT; self.SEV(); return 2; };

			//STAA	
			this.optable[0x87] = delegate () { self.memmode = MC6803.IMMEDIATE; self.STAA(); return 3; }; // TEST
			this.optable[0x97] = delegate () { self.memmode = MC6803.DIRECT; self.STAA(); return 3; };
			this.optable[0xa7] = delegate () { self.memmode = MC6803.INDEX; self.STAA(); return 4; };
			this.optable[0xb7] = delegate () { self.memmode = MC6803.EXTENDED; self.STAA(); return 4; };

			//STAB	
			//this.optable[0xc7] = delegate() { self.memmode = MC6803.IMMEDIATE; self.STAB(); return 3; }; // TEST
			this.optable[0xd7] = delegate () { self.memmode = MC6803.DIRECT; self.STAB(); return 3; };
			this.optable[0xe7] = delegate () { self.memmode = MC6803.INDEX; self.STAB(); return 4; };
			this.optable[0xf7] = delegate () { self.memmode = MC6803.EXTENDED; self.STAB(); return 4; };

			//STD	
			//this.optable[0xcd] = delegate() { self.memmode = MC6803.IMMEDIATE; self.STD(); return 5; };
			this.optable[0xdd] = delegate () { self.memmode = MC6803.DIRECT; self.STD(); return 4; };
			this.optable[0xed] = delegate () { self.memmode = MC6803.INDEX; self.STD(); return 5; };
			this.optable[0xfd] = delegate () { self.memmode = MC6803.EXTENDED; self.STD(); return 5; };

			//STS	
			//this.optable[0x8f] = delegate() { self.memmode = MC6803.IMMEDIATE; self.STS(); return 4; }; // TEST
			this.optable[0x9f] = delegate () { self.memmode = MC6803.DIRECT; self.STS(); return 4; };
			this.optable[0xaf] = delegate () { self.memmode = MC6803.INDEX; self.STS(); return 5; };
			this.optable[0xbf] = delegate () { self.memmode = MC6803.EXTENDED; self.STS(); return 5; };

			//STX	
			//this.optable[0xcf] = delegate() { self.memmode = MC6803.IMMEDIATE; self.STX(); return 4; };
			this.optable[0xdf] = delegate () { self.memmode = MC6803.DIRECT; self.STX(); return 4; };
			this.optable[0xef] = delegate () { self.memmode = MC6803.INDEX; self.STX(); return 5; };
			this.optable[0xFF] = delegate () { self.memmode = MC6803.EXTENDED; self.STX(); return 5; };

			//SUBA	
			this.optable[0x80] = delegate () { self.memmode = MC6803.IMMEDIATE; self.SUBA(); return 2; };
			this.optable[0x90] = delegate () { self.memmode = MC6803.DIRECT; self.SUBA(); return 3; };
			this.optable[0xa0] = delegate () { self.memmode = MC6803.INDEX; self.SUBA(); return 4; };
			this.optable[0xb0] = delegate () { self.memmode = MC6803.EXTENDED; self.SUBA(); return 4; };

			//SUBB	
			this.optable[0xc0] = delegate () { self.memmode = MC6803.IMMEDIATE; self.SUBB(); return 2; };
			this.optable[0xd0] = delegate () { self.memmode = MC6803.DIRECT; self.SUBB(); return 3; };
			this.optable[0xe0] = delegate () { self.memmode = MC6803.INDEX; self.SUBB(); return 4; };
			this.optable[0xf0] = delegate () { self.memmode = MC6803.EXTENDED; self.SUBB(); return 4; };

			//SUBD	
			this.optable[0x83] = delegate () { self.memmode = MC6803.IMMEDIATE; self.SUBD(); return 4; };
			this.optable[0x93] = delegate () { self.memmode = MC6803.DIRECT; self.SUBD(); return 5; };
			this.optable[0xa3] = delegate () { self.memmode = MC6803.INDEX; self.SUBD(); return 6; };
			this.optable[0xb3] = delegate () { self.memmode = MC6803.EXTENDED; self.SUBD(); return 6; };

			//SWI	
			this.optable[0x3f] = delegate () { self.memmode = MC6803.INHERENT; self.SWI(); return 12; };

			//TAB	
			this.optable[0x16] = delegate () { self.memmode = MC6803.INHERENT; self.TAB(); return 2; };

			//TAP	
			this.optable[0x06] = delegate () { self.memmode = MC6803.INHERENT; self.TAP(); return 2; };

			//TBA	
			this.optable[0x17] = delegate () { self.memmode = MC6803.INHERENT; self.TBA(); return 2; };

			//TPA	
			this.optable[0x07] = delegate () { self.memmode = MC6803.INHERENT; self.TPA(); return 2; };

			//TST	
			this.optable[0x6d] = delegate () { self.memmode = MC6803.INDEX; self.TST(); return 6; };
			this.optable[0x7d] = delegate () { self.memmode = MC6803.EXTENDED; self.TST(); return 6; };

			//TSTA	
			this.optable[0x4d] = delegate () { self.memmode = MC6803.INHERENT; self.TSTA(); return 2; };

			//TSTB	
			this.optable[0x5d] = delegate () { self.memmode = MC6803.INHERENT; self.TSTB(); return 2; };

			//TSX	
			this.optable[0x30] = delegate () { self.memmode = MC6803.INHERENT; self.TSX(); return 3; };

			//TXS 
			this.optable[0x35] = delegate () { self.memmode = MC6803.INHERENT; self.TXS(); return 3; };

			//WAI 
			this.optable[0x3e] = delegate () { self.memmode = MC6803.INHERENT; self.WAI(); return 9; };


			this.optable[0x00] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x00); return 2; };
			this.optable[0x02] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x02); return 2; };
			this.optable[0x03] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x03); return 2; };
			this.optable[0x12] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x12); return 2; };
			this.optable[0x13] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x13); return 2; };
			this.optable[0x14] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x14); return 2; };
			this.optable[0x15] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x15); return 2; };
			this.optable[0x18] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x18); return 2; };
			this.optable[0x1a] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x1a); return 2; };
			this.optable[0x1c] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x1c); return 2; };
			this.optable[0x1d] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x1d); return 2; };
			this.optable[0x1e] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x1e); return 2; };
			this.optable[0x1f] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x1f); return 2; };
			this.optable[0x41] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x41); return 2; };
			this.optable[0x45] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x45); return 2; };
			this.optable[0x4b] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x4b); return 2; };
			this.optable[0x4e] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x4e); return 2; };
			this.optable[0x51] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x51); return 2; };
			this.optable[0x55] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x55); return 2; };
			this.optable[0x5b] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x5b); return 2; };
			this.optable[0x5e] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x5e); return 2; };
			this.optable[0x61] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x61); return 2; };
			this.optable[0x65] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x65); return 2; };
			this.optable[0x6b] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x6b); return 2; };
			this.optable[0x71] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x71); return 2; };
			this.optable[0x75] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x75); return 2; };
			this.optable[0x7b] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x7b); return 2; };
			this.optable[0x87] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x87); return 2; };
			this.optable[0x8f] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0x8f); return 2; };
			this.optable[0xc7] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0xc7); return 2; };
			this.optable[0xcd] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0xcd); return 2; };
			this.optable[0xcf] = delegate () { self.memmode = MC6803.IMMEDIATE; self.ERROR(0xcf); return 2; };
		}

		public void ERROR(int op) 
		{
			Console.WriteLine("ERROR: unknown opcode: " + op);
		}

		public void ABA() 
		{
			this.REG_A = this.Add(this.REG_A, this.REG_B);
		}
		public void ABX() 
		{
			this.REG_IP += this.REG_B;
			this.REG_IP &= 0xFFFF;
		}
		public void ADCA() 
		{
			this.REG_A = this.AddCarry(this.REG_A, this.FetchData());
		}
		public void ADCB() 
		{
			this.REG_B = this.AddCarry(this.REG_B, this.FetchData());
		}
		public void ADDA() 
		{
			this.REG_A = this.Add(this.REG_A, this.FetchData());
		}
		public void ADDB() 
		{
			this.REG_B = this.Add(this.REG_B, this.FetchData());
		}
		public void ADDD() 
		{
			this.REG_D = this.Add16(this.REG_D, this.FetchData16());
		}
		public void ANDA() 
		{
			this.REG_A = this.And(this.REG_A, this.FetchData());
		}
		public void ANDB() 
		{
			this.REG_B = this.And(this.REG_B, this.FetchData());
		}
		public void ASL() 
		{
			var scratch = this.ArithmeticShiftLeft(this.FetchData());
			this.SetLastRead(scratch);
		} 
		public void ASLA() 
		{
			this.REG_A = this.ArithmeticShiftLeft(this.REG_A);
		}
		public void ASLB() 
		{
			this.REG_B = this.ArithmeticShiftLeft(this.REG_B);
		}
		public void ASLD() 
		{
			this.REG_D = this.ShiftLeft16(this.REG_D);
		}
		public void ASR() 
		{
			var scratch = this.ArithmeticShiftRight(this.FetchData());
			this.SetLastRead(scratch);
		}
		public void ASRA() 
		{
			this.REG_A = this.ArithmeticShiftRight(this.REG_A);
		}
		public void ASRB() 
		{
			this.REG_B = this.ArithmeticShiftRight(this.REG_B);
		}
		public void BRA() 
		{
			var pos = this.SignExtend(this.FetchData());
			this.REG_PC += pos;
			this.REG_PC &= 0xFFFF;
		} 
		public void BRN() 
		{
			this.FetchData();
		}
		public void BCC() 
		{
			var pos = this.SignExtend(this.FetchData());
			if (this.F_CARRY == 0)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BCS() 
		{
			var pos = this.SignExtend(this.FetchData());
			if (this.F_CARRY == 1)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BEQ() 
		{
			var pos = this.SignExtend(this.FetchData());
			if (this.F_ZERO == 1)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BGE() 
		{
			var pos = this.SignExtend(this.FetchData());
			if ((this.F_SIGN ^ this.F_OVERFLOW) == 0)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BGT() 
		{
			var pos = this.SignExtend(this.FetchData());
			if ((this.F_ZERO | (this.F_SIGN ^ this.F_OVERFLOW)) == 0)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BHI() 
		{
			var pos = this.SignExtend(this.FetchData());
			if ((this.F_CARRY | this.F_ZERO) == 0)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BLE() 
		{
			var pos = this.SignExtend(this.FetchData());
			if ((this.F_ZERO | (this.F_SIGN ^ this.F_OVERFLOW)) == 1)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BLS() 
		{
			var pos = this.SignExtend(this.FetchData());
			if ((this.F_CARRY | this.F_ZERO) == 1)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BLT() 
		{
			var pos = this.SignExtend(this.FetchData());
			if ((this.F_SIGN ^ this.F_OVERFLOW) == 1)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BMI() 
		{
			var pos = this.SignExtend(this.FetchData());
			if (this.F_SIGN == 1)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BNE() 
		{
			var pos = this.SignExtend(this.FetchData());
			if (this.F_ZERO == 0)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BVC() 
		{
			var pos = this.SignExtend(this.FetchData());
			if (this.F_OVERFLOW == 0)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BVS() 
		{
			var pos = this.SignExtend(this.FetchData());
			if (this.F_OVERFLOW == 1)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BPL() 
		{
			var pos = this.SignExtend(this.FetchData());
			if (this.F_SIGN == 0)
			{
				this.REG_PC += pos;
				this.REG_PC &= 0xFFFF;
			}
		}
		public void BSR() 
		{
			var pos = this.SignExtend(this.Fetch());
			this.PushStack16(this.REG_PC);
			this.REG_PC += pos;
			this.REG_PC &= 0xFFFF;
		}
		public void BITA() 
		{
			this.And(this.REG_A, this.FetchData());
		}
		public void BITB() 
		{
			this.And(this.REG_B, this.FetchData());
		}
		public void CBA() 
		{
			this.Subtract(this.REG_A, this.REG_B);
		}
		public void CLC() 
		{
			this.F_CARRY = 0;
		}
		public void CLI() 
		{
			this.F_INTERRUPT = 0;
			//this.emulate();
			//this.checkIRQLines();
		}
		public void CLR() 
		{
			this.SetMemory(this.FetchAddress(), 0);
			this.F_ZERO = 1;
			this.F_SIGN = 0;
			this.F_OVERFLOW = 0;
			this.F_CARRY = 0;
		}
		public void CLRA() 
		{
			this.REG_A = 0;
			this.F_SIGN = 0;
			this.F_OVERFLOW = 0;
			this.F_CARRY = 0;
			this.F_ZERO = 1;
		}
		public void CLRB() 
		{
			this.REG_B = 0;
			this.F_SIGN = 0;
			this.F_OVERFLOW = 0;
			this.F_CARRY = 0;
			this.F_ZERO = 1;
		}
		public void CLV() 
		{
			this.F_OVERFLOW = 0;
		}
		public void CMPA() 
		{
			this.Subtract(this.REG_A, this.FetchData());
		}
		public void CMPB() 
		{
			this.Subtract(this.REG_B, this.FetchData());
		}
		public void COM() 
		{
			var scratch = this.Complement(this.FetchData());
			this.SetLastRead(scratch);
		}
		public void COMA() 
		{
			this.REG_A = this.Complement(this.REG_A);
		}
		public void COMB() 
		{
			this.REG_B = this.Complement(this.REG_B);
		}
		public void CPX() 
		{
			this.Subtract16(this.REG_IP, this.FetchData16());
		}
		public void DAA() 
		{
			int msn, lsn, t, cf = 0;

			msn = this.REG_A & 0xf0;
			lsn = this.REG_A & 0x0f;

			if (lsn > 0x09 || this.F_HALFCARRY != 0) cf |= 0x06;
			if (msn > 0x80 && lsn > 0x09) cf |= 0x60;
			if (msn > 0x90 || this.F_CARRY != 0) cf |= 0x60;

			t = cf + this.REG_A;

			this.F_ZERO = 0;
			this.F_SIGN = 0;
			this.F_OVERFLOW = 0;

			this.Set8NZ(t & 0xFFFF);
			this.Set8C(t & 0xFFFF);

			this.REG_A = t;
		}
		public void DEC() 
		{
			var scratch = this.Decrement(this.FetchData());
			this.SetLastRead(scratch);
		}
		public void DECA() 
		{
			this.REG_A = this.Decrement(this.REG_A);
		}
		public void DECB() 
		{
			this.REG_B = this.Decrement(this.REG_B);
		}
		public void DES() 
		{
			this.REG_SP--;
			this.REG_SP &= 0xFFFF;
		}
		public void DEX() 
		{
			this.REG_IP--;
			this.REG_IP &= 0xFFFF;
			this.Set16Z(this.REG_IP);
		}
		public void EORA() 
		{
			this.REG_A = this.Eor(this.REG_A, this.FetchData());
		}
		public void EORB() 
		{
			this.REG_B = this.Eor(this.REG_B, this.FetchData());
		}
		public void INC() 
		{
			var scratch = this.Increment(this.FetchData());
			this.SetLastRead(scratch);
		}
		public void INCA() 
		{
			this.REG_A = this.Increment(this.REG_A);
		}
		public void INCB() 
		{
			this.REG_B = this.Increment(this.REG_B);
		}
		public void INS() 
		{
			this.REG_SP++;
			this.REG_SP &= 0xFFFF;
		}
		public void INX() 
		{
			this.REG_IP++;
			this.REG_IP &= 0xFFFF;
			this.Set16Z(this.REG_IP);
		}
		public void JMP() 
		{
			int pos;
			if (this.memmode == MC6803.INDEX)
			{
				pos = this.REG_IP + this.Fetch();
			}
			else
			{
				pos = this.FetchAddress();
			}
			this.REG_PC = pos;
		}
		public void JSR() 
		{
			var pos = this.FetchAddress();
			this.PushStack16(this.REG_PC);
			this.REG_PC = pos;
		}
		public void LDAA() 
		{
			this.REG_A = this.FetchData();
			this.Set8NZ(this.REG_A);
			this.F_OVERFLOW = 0;
		}
		public void LDAB() 
		{
			this.REG_B = this.FetchData();
			this.Set8NZ(this.REG_B);
			this.F_OVERFLOW = 0;
		}
		public void LDD() 
		{
			this.REG_D = this.FetchData16();
			this.Set16NZ(this.REG_D);
			this.F_OVERFLOW = 0;
		}
		public void LDS() 
		{
			this.REG_SP = this.FetchData16();
			this.Set16NZ(this.REG_SP);
			this.F_OVERFLOW = 0;
		}
		public void LDX() 
		{
			var scratch = this.FetchData16();
			this.REG_IP = scratch;
			this.Set16NZ(this.REG_IP);
			this.F_OVERFLOW = 0;
		}
		public void LSR() 
		{
			var scratch = this.LogicalShiftRight(this.FetchData());
			this.SetLastRead(scratch);
		}
		public void LSRA() 
		{
			this.REG_A = this.LogicalShiftRight(this.REG_A);
		}
		public void LSRB() 
		{
			this.REG_B = this.LogicalShiftRight(this.REG_B);
		}
		public void LSRD() 
		{
			this.REG_D = this.ShiftRight16(this.REG_D);
		}
		public void MUL() 
		{
			this.REG_D = (this.REG_A * this.REG_B) & 0xFFFF;
			if ((this.REG_A * this.REG_B) > 0xFFFF)
			{
				this.F_CARRY = 1;
			}
			else
			{
				this.F_CARRY = 0;
			}
		}
		public void NEG() 
		{
			var scratch = this.Negate(this.FetchData());
			this.SetLastRead(scratch);
		}
		public void NEGA() 
		{
			this.REG_A = this.Negate(this.REG_A);
		}
		public void NEGB() 
		{
			this.REG_B = this.Negate(this.REG_B);
		}
		public void NOP() 
		{
		} 
		public void NGC() 
		{
			var scratch = this.NegateCarry(this.FetchData());
			this.SetLastRead(scratch);
		}
		public void NGCA() 
		{
			this.REG_A = this.NegateCarry(this.REG_A);
		}
		public void NGCB() 
		{
			this.REG_B = this.NegateCarry(this.REG_B);
		}
		public void ORAA() 
		{
			this.REG_A = this.Or(this.REG_A, this.FetchData());
		}
		public void ORAB() 
		{
			this.REG_B = this.Or(this.REG_B, this.FetchData());
		}
		public void PSHA() 
		{
			this.PushStack(this.REG_A);
		}
		public void PSHB() 
		{
			this.PushStack(this.REG_B);
		}
		public void PSHX() 
		{
			this.PushStack16(this.REG_IP);
		}
		public void PULA() 
		{
			this.REG_A = this.PopStack();
		}
		public void PULB() 
		{
			this.REG_B = this.PopStack();
		}
		public void PULX() 
		{
			this.REG_IP = this.PopStack16();
		}
		public void ROL() 
		{
			var scratch = this.RotateLeft(this.FetchData());
			this.SetLastRead(scratch);
		}
		public void ROLA() 
		{
			this.REG_A = this.RotateLeft(this.REG_A);
		}
		public void ROLB() 
		{
			this.REG_B = this.RotateLeft(this.REG_B);
		}
		public void ROR() 
		{
			var scratch = this.RotateRight(this.FetchData());
			this.SetLastRead(scratch);
		}
		public void RORA() 
		{
			this.REG_A = this.RotateRight(this.REG_A);
		}
		public void RORB() 
		{
			this.REG_B = this.RotateRight(this.REG_B);
		}
		public void RTI() 
		{
			this.VariableToFlags(this.PopStack());
			this.REG_B = this.PopStack();
			this.REG_A = this.PopStack();
			this.REG_IP = this.PopStack16();
			this.REG_PC = this.PopStack16();
			//this.checkIRQLines();
		}
		public void RTS() 
		{
			this.REG_PC = this.PopStack16();
		}
		public void SBA() 
		{
			this.REG_A = this.Subtract(this.REG_A, this.REG_B);
		}
		public void SBCA() 
		{
			this.REG_A = this.SubtractCarry(this.REG_A, this.FetchData());
		}
		public void SBCB() 
		{
			this.REG_B = this.SubtractCarry(this.REG_B, this.FetchData());
		}
		public void SCC() 
		{
			this.F_CARRY = 1;
		} 
		public void SEI() 
		{
			this.F_INTERRUPT = 1;
			//this.emulate();
			//this.history = [];
			//this.checkIRQLines();
		} 
		public void SEV() 
		{
			this.F_OVERFLOW = 1;
		} 
		public void STAA() 
		{
			this.SetMemory(this.FetchAddress(), this.REG_A);
			this.F_OVERFLOW = 0;
			this.Set8NZ(this.REG_A);
		}
		public void STAB( )
		{
			this.SetMemory(this.FetchAddress(), this.REG_B);
			this.F_OVERFLOW = 0;
			this.Set8NZ(this.REG_B);
		}
		public void STD( )
		{
			var scratch = this.FetchAddress();
			this.SetMemory16(scratch, this.REG_D);
			this.F_OVERFLOW = 0;
			this.Set16NZ(this.REG_D);
		}
		public void STS() 
		{
			var scratch = this.FetchAddress();
			this.SetMemory16(scratch, this.REG_SP);
			this.F_OVERFLOW = 0;
			this.Set16NZ(this.REG_SP);
		}
		public void STX() 
		{
			var scratch = this.FetchAddress();
			this.SetMemory16(scratch, this.REG_IP);
			this.F_OVERFLOW = 0;
			this.Set16NZ(this.REG_IP);
		}
		public void SUBA() 
		{
			this.REG_A = this.Subtract(this.REG_A, this.FetchData());
		}
		public void SUBB() 
		{
			this.REG_B = this.Subtract(this.REG_B, this.FetchData());
		}
		public void SUBD() 
		{
			this.REG_D = this.Subtract16(this.REG_D, this.FetchData16());
		}
		public void SWI() 
		{
			Console.WriteLine("SWI Called - Exit");

			this.PushStack16(this.REG_PC);
			this.PushStack16(this.REG_IP);
			this.PushStack(this.REG_A);
			this.PushStack(this.REG_B);
			this.PushStack(this.FlagsToVariable());

			this.SEI();

			this.REG_PC = this.FetchMemory(0XFFFA) & 0xFFFF;
			this.REG_PC &= 0xFFFF;

			//                    return;
			//                    this.F_INTERRUPT = 1;
			//                    this.pushStack16(this.REG_PC);
			//                    this.pushStack16(this.REG_IP);
			//                    this.pushStack16(this.REG_A);
			//                    this.pushStack16(this.REG_B);
			//                    this.pushStack16(this.flagsToVariable());
			//                    this.REG_PC = (this.fetchMemory(0xFFfa) << 8) + this.fetchMemory(0xFFfb);
		}
		public void TAB() 
		{
			this.REG_B = this.REG_A;
			this.Set8NZ(this.REG_B);
			this.F_OVERFLOW = 0;
		}
		public void TAP() 
		{
			this.VariableToFlags(this.REG_A);
			//this.emulate();
			//this.checkIRQLines();
		}
		public void TBA() 
		{
			this.REG_A = this.REG_B;
			this.Set8NZ(this.REG_A);
			this.F_OVERFLOW = 0;
		}
		public void TPA() 
		{
			this.REG_A = this.FlagsToVariable();
		}
		public void TST() 
		{
			this.F_OVERFLOW = 0;
			this.F_CARRY = 0;
			this.Set8NZ(this.FetchData());
		}
		public void TSTA() 
		{
			this.F_OVERFLOW = 0;
			this.F_CARRY = 0;
			this.Set8NZ(this.REG_A);
		}
		public void TSTB() 
		{
			this.F_OVERFLOW = 0;
			this.F_CARRY = 0;
			this.Set8NZ(this.REG_B);
		}
		public void TSX() 
		{
			this.REG_IP = this.REG_SP + 1;
		}
		public void TXS() 
		{
			this.REG_SP = this.REG_IP - 1;
		}
		public void WAI() 
		{
			this.waiState |= this.WAI_;
			this.PushStack16(this.REG_PC);
			this.PushStack16(this.REG_IP);
			this.PushStack(this.REG_A);
			this.PushStack(this.REG_B);
			this.PushStack(this.FlagsToVariable());
			//this.checkIRQLines();

			if ((this.waiState & this.WAI_) != 0)
			{
				Console.WriteLine("eat cycles");
				this.cycleCount = (this.cycleCount + 1) & 0xFFFF;
				this.CheckTimer();
			}
			Console.WriteLine("WAI called");
		}

		public int FlagsToVariable() 
		{
			var ret =
				this.F_CARRY * 0x01 +
				this.F_OVERFLOW * 0x02 +
				this.F_ZERO * 0x04 +
				this.F_SIGN * 0x08 +
				this.F_INTERRUPT * 0x10 +
				this.F_HALFCARRY * 0x20;
			return ret;
		}

		public void VariableToFlags(int CCR) 
		{
			this.F_CARRY = (CCR & 0x01);
			this.F_OVERFLOW = (CCR & 0x02) >> 1;
			this.F_ZERO = (CCR & 0x04) >> 2;
			this.F_SIGN = (CCR & 0x08) >> 3;
			this.F_INTERRUPT = (CCR & 0x10) >> 4;
			this.F_HALFCARRY = (CCR & 0x20) >> 5;
		}

		public int Fetch() 
		{
			var scratch = this.FetchMemory(this.REG_PC);
			this.REG_PC++;
			this.REG_PC &= 0xFFFF;
			return scratch;
		}

		public int FetchOpCode() 
		{
			return this.Fetch();
		}

		public int FetchMemory(int address) 
		{
			address &= 0xFFFF;

			// nothing on the bus.
			// Just let it grab back the address line.
			return 0xFF & address;
		}

		public int FetchAddress() 
		{
			switch (this.memmode)
			{
				case MC6803.DIRECT:
					return this.Fetch();
				case MC6803.INDEX:
					return this.Fetch() + this.REG_IP;
				case MC6803.EXTENDED:
					return (this.Fetch() << 8) + this.Fetch();
				default:
					Console.WriteLine("Tried FetchAddress with mode" + this.memmode);
					return 0;
			}
		}

		public int FetchData() 
		{
			switch (this.memmode)
			{
				case MC6803.IMMEDIATE:
					return this.Fetch();
				case MC6803.RELATIVE:
					return this.Fetch();
				case MC6803.INDEX:
					return this.FetchMemory(this.Fetch() + this.REG_IP);
				case MC6803.DIRECT:
					return this.FetchMemory(this.Fetch());
				case MC6803.EXTENDED:
					return this.FetchMemory((this.Fetch() << 8) + this.Fetch());
				default:
					Console.WriteLine("Invalid mode in fetchData");
					return 0;
			}
		}

		public int FetchData16() 
		{
			int scratch;
			switch (this.memmode)
			{
				case MC6803.IMMEDIATE:
					return (this.Fetch() << 8) + this.Fetch();
				case MC6803.INDEX:
					scratch = this.Fetch() + this.REG_IP;
					 break;
				case MC6803.DIRECT:
					scratch = this.Fetch();
					 break;
				case MC6803.EXTENDED:
					scratch = (this.Fetch() << 8) + this.Fetch();
					 break;
				default:
					Console.WriteLine("Invalid mode in fetchData16");
					return 0;
			}
			//return ((this.fetchMemory(scratch) << 8) + this.fetchMemory(scratch + 1)) & 0xFFFF;
			return ((this.FetchMemory(scratch) << 8) + this.FetchMemory(scratch + 1));
		}

		public void SetMemory(int address, int value) 
		{
			address &= 0xFFFF;
			value &= 0xFF;
		}

		public void SetMemory16(int address, int value) 
		{
			address &= 0xFFFF;
			value &= 0xFFFF;
			this.SetMemory(address, value >> 8);
			this.SetMemory(address + 1, value & 0xFF);
		}

		public void SetLastRead(int value) 
		{
			value &= 0xFF;
			int position = 0;
			switch (this.memmode)
			{
				case MC6803.DIRECT:
					position = this.FetchMemory(this.REG_PC - 1);
					break;
				case MC6803.INDEX:
					position = this.FetchMemory(this.REG_PC - 1) + this.REG_IP;
					break;
				case MC6803.EXTENDED:
					position = (this.FetchMemory(this.REG_PC - 2) << 8) + this.FetchMemory(this.REG_PC - 1);
					break;
				default:
					Console.WriteLine("Tried to set last read with mode " + this.memmode);
					position = 0;
					break;
			}
			this.SetMemory(position, value);
		}

		public void PushStack(int value) 
		{
			this.SetMemory(this.REG_SP, value);
			this.REG_SP--;
			this.REG_SP &= 0xFFFF;
		}

		public void PushStack16(int value) 
		{
			this.SetMemory16(this.REG_SP - 1, value);
			this.REG_SP -= 2;
			this.REG_SP &= 0xFFFF;
		}

		public int PopStack() 
		{
			this.REG_SP++;
			this.REG_SP &= 0xFFFF;
			return this.FetchMemory(this.REG_SP);
		}

		public int PopStack16() 
		{
			this.REG_SP += 2;
			this.REG_SP &= 0xFFFF;
			return this.FetchMemory(this.REG_SP) + (this.FetchMemory(this.REG_SP - 1) << 8);
		}

		public int Add(int first, int second) 
		{
			first &= 0xFF;
			second &= 0xFF;
			var scratch = first + second;
			this.Set8HNZVC(first, second, (scratch & 0xFFFF));
			return (scratch & 0xFF);
		}

		public int AddCarry(int first, int second) 
		{
			first &= 0xFF;
			second &= 0xFF;
			var scratch = first + second + this.F_CARRY;
			this.Set8HNZVC(first, second, (scratch & 0xFFFF));
			return (scratch & 0xFF);
		}

		public int Add16(int first, int second) 
		{
			first &= 0xFFFF;
			second &= 0xFFFF;
			var scratch = first + second;
			this.Set16NZVC(first, second, (scratch & -1)); // 0xFFFFffff
			return (scratch & 0xFFFF);
		}

		public int Subtract(int first, int second) 
		{
			first &= 0xFF;
			second &= 0xFF;
			var scratch = first - second;
			this.Set8NZVC(first, second, (scratch & 0xFFFF));
			return (scratch & 0xFF);
		}

		public int Subtract16(int first, int second) 
		{
			first &= 0xFFFF;
			second &= 0xFFFF;
			var scratch = first - second;
			this.Set16NZVC(first, second, (scratch & -1)); // 0XFFFFFFFF
			return (scratch & 0xFFFF);
		}

		public int SubtractCarry(int first, int second) 
		{
			first &= 0xFF;
			second &= 0xFF;
			var scratch = first - second - this.F_CARRY;
			this.Set8NZVC(first, second, (scratch & 0xFFFF));
			return (scratch & 0xFF);
		}

		public int And(int first, int second) 
		{
			first &= 0xFF;
			second &= 0xFF;
			var result = first & second;
			this.Set8NZ(result & 0xFF);
			this.F_OVERFLOW = 0;
			//this.F_CARRY = 0; // Why do you carry with and? surely 0xFF & 0xFF is just 0xFF.... (no carry?)
			return (result & 0xFF);
		}

		public int Complement(int first) 
		{
			first &= 0xFF;
			var result = first ^ 0xFF;
			this.Set8NZ(result & 0xFF);
			this.F_OVERFLOW = 0;
			this.F_CARRY = 1;
			return (result & 0xFF);
		}

		public int Eor(int first, int second) 
		{
			first &= 0xFF;
			second &= 0xFF;
			var result = first ^ second;
			this.Set8NZ(result & 0xFF);
			this.F_OVERFLOW = 0;
			return (result & 0xFF);
		}

		public int Negate(int first) 
		{
			return this.Subtract(0, first);
		}

		public int NegateCarry(int first) 
		{
			return this.SubtractCarry(0, first);
		}

		public int Or(int first, int second) 
		{
			first &= 0xFF;
			second &= 0xFF;
			var result = first | second;
			this.Set8NZ(result & 0xFF);
			this.F_OVERFLOW = 0;
			return (result & 0xFF);
		}

		public int Decrement(int first) 
		{
			first &= 0xFF;
			this.F_OVERFLOW = (first == 0x80) ? 1 : 0;
			var result = (first - 1) & 0xFF;
			this.Set8NZ(result);
			return (result);
		}

		public int Increment(int first) 
		{
			first &= 0xFF;
			this.F_OVERFLOW = (first == 0x7f) ? 1 : 0;
			var result = (first + 1) & 0xFF;
			this.Set8NZ(result);
			return (result);
		}

		public int ShiftLeft(int first, int mode) 
		{
			first &= 0xFF;
			var result = (first << 1) & 0xFF;
			if (mode == 3)
			{
				result += this.F_CARRY;
			}
			this.F_CARRY = ((first & 0x80) >> 7);
			this.Set8NZ(result);
			this.F_OVERFLOW = (this.F_SIGN ^ this.F_CARRY);
			return (result & 0xFF);
		}

		public int ArithmeticShiftLeft(int first) 
		{
			return this.ShiftLeft(first, 1);
		}

		public int RotateLeft(int first) 
		{
			return this.ShiftLeft(first, 3);
		}

		public int ShiftLeft16(int first) 
		{
			first &= 0xFFFF;
			var result = (first << 1) & 0xFFFF;
			this.F_CARRY = ((first & 0x8000) >> 15);
			this.Set16NZ(result);
			this.F_OVERFLOW = (this.F_SIGN ^ this.F_CARRY);
			return (result & 0xFFFF);
		}

		public int ShiftRight16(int first) 
		{
			first &= 0xFFFF;
			var result = (first >> 1) & 0xFFFF;
			this.F_CARRY = (first & 0x01);
			this.Set16NZ(result);
			this.F_OVERFLOW = (this.F_SIGN ^ this.F_CARRY);
			return (result & 0xFFFF);
		}

		public int ShiftRight(int first, int mode) 
		{
			first &= 0xFF;
			var result = (first >> 1) & 0xFF;
			switch (mode)
			{
				case 1:
					result |= (first & 0x80);
					break;
				case 3:
					result |= (this.F_CARRY << 7);
					break;
				case 2:
					break;
				default:
					Console.WriteLine("Bad shift");
					break;
			}
			this.F_CARRY = (first & 0x01);
			this.Set8NZ(result);
			this.F_OVERFLOW = (this.F_SIGN ^ this.F_CARRY);
			return (result & 0xFF);
		}

		public int ArithmeticShiftRight(int first) 
		{
			return this.ShiftRight(first, 1);
		}

		public int LogicalShiftRight(int first) 
		{
			return this.ShiftRight(first, 2);
		}

		public int RotateRight(int first) 
		{
			return this.ShiftRight(first, 3);
		}

		public void Set8N(int value) 
		{
			this.F_SIGN = (value & 0x80) >> 7;
		}

		public void Set16N(int value) 
		{
			this.F_SIGN = (value & 0x8000) >> 15;
		}

		public void Set8Z(int value) 
		{
			this.F_ZERO = (value & 0xFF) == 0 ? 1 : 0;
		}

		public void Set16Z(int value) 
		{
			this.F_ZERO = (value & 0xFFFF) == 0 ? 1 : 0;
		}

		public void Set8H(int first, int second, int result) 
		{
			this.F_HALFCARRY = ((first ^ second ^ result) & 0x10) >> 4;
		}

		public void Set8C(int value) 
		{
			this.F_CARRY = (value & 0x100) >> 8;
		}

		public void Set16C(int value) 
		{
			this.F_CARRY = (value & 0x10000) >> 16;
		}

		public void Set8V(int first, int second, int result) 
		{
			this.F_OVERFLOW = ((first ^ second ^ result ^ (result >> 1)) & 0x80) >> 7;
		}

		public void Set16V(int first, int second, int result) 
		{
			this.F_OVERFLOW = ((first ^ second ^ result ^ (result >> 1)) & 0x8000) >> 15;
		}

		public void Set8NZ(int value) 
		{
			this.Set8N(value);
			this.Set8Z(value);
		}

		public void Set16NZ(int value) 
		{
			this.Set16N(value);
			this.Set16Z(value);
		}

		public void Set8HNZVC(int first, int second, int result) 
		{
			this.Set8NZVC(first, second, result);
			this.Set8H(first, second, result);
		}

		public void Set8NZVC(int first, int second, int result) 
		{
			this.Set8NZ(result & 0xFF);
			this.Set8V(first, second, result);
			this.Set8C(result);
		}

		public void Set16NZVC(int first, int second, int result) 
		{
			this.Set16NZ(result & 0xFFFF);
			this.Set16V(first, second, result);
			this.Set16C(result);
		}

		public int SignExtend(int value) 
		{
			return value < 128 ? value : value - 256;
		}

		public string[] Mnemonics = new string[] { ".CLB", "NOP ", ".CEA", ".SEA", "LSRD", "ASLD", "TAP ", "TPA ", "INX ", "DEX ", "CLV ", "SEV ", "CLC ", "SEC ", "CLI ", "SEI ",
			"SBA ", "CBA ", ".12 ", ".13 ", ".14 ", ".15 ", "TAB ", "TBA ", ".18 ", "DAA ", ".1A ", "ABA ", ".1C ", ".1D ", ".1E ", ".1F ",
			"BRA ", "BRN ", "BHI ", "BLS ", "BCC ", "BCS ", "BNE ", "BEQ ", "BVC ", "BVS ", "BPL ", "BMI ", "BGE ", "BLT ", "BGT ", "BLE ",
			"TSX ", "INS ", "PULA", "PULB", "DES ", "TXS ", "PHSA", "PSHB", "PULX", "RTS ", "ABX ", "RTI ", "PSHX", "MUL ", "WAI ", "SWI ",
			"NEGA", ".41 ", ".42 ", "COMA", "LSRA", ".45 ", "RORA", "ASRA", "ASLA", "ROLA", "DECA", ".4B ", "INCA", "TSTA", "T4E ", "CLRA",
			"NEGB", ".51 ", ".52 ", "COMB", "LSRB", ".55 ", "RORB", "ASRB", "ASLB", "ROLB", "DECB", ".5B ", "INCB", "TSTB", "T5E ", "CLRB",
			"NEG ", ".61 ", ".62 ", "COM ", "LSR ", ".65 ", "ROR ", "ASR ", "ASL ", "ROL ", "DEC ", ".6B ", "INC ", "TST ", "JMP ", "CLR ",
			"NEG ", ".71 ", ".72 ", "COM ", "LSR ", ".75 ", "ROR ", "ASR ", "ASL ", "ROL ", "DEC ", ".7B ", "INC ", "TST ", "JMP ", "CLR ",
			"SUBA", "CMPA", "SBCA", "SUBD", "ANDA", "BITA", "LDAA", ".87 ", "EORA", "ADCA", "ORAA", "ADDA", "CMPX", "BSR ", "LDS ", ".8F ",
			"SUBA", "CMPA", "SBCA", "SUBD", "ANDA", "BITA", "LDAA", "STAA", "EORA", "ADCA", "ORAA", "ADDA", "CMPX", "JSR ", "LDS ", "STS ",
			"SUBA", "CMPA", "SBCA", "SUBD", "ANDA", "BITA", "LDAA", "STAA", "EORA", "ADCA", "ORAA", "ADDA", "CMPX", "JSR ", "LDS ", "STS ",
			"SUBA", "CMPA", "SBCA", "SUBD", "ANDA", "BITA", "LDAA", "STAA", "EORA", "ADCA", "ORAA", "ADDA", "CMPX", "JSR ", "LDS ", "STS ",
			"SUBB", "CMPB", "SBCB", "ADDD", "ANDB", "BITB", "LDAB", ".C7 ", "EORB", "ADCB", "ORAB", "ADDB", "LDD ", ".CD ", "LDX ", ".CF ",
			"SUBB", "CMPB", "SBCB", "ADDD", "ANDB", "BITB", "LDAB", "STAB", "EORB", "ADCB", "ORAB", "ADDB", "LDD ", "STD ", "LDX ", "STX ",
			"SUBB", "CMPB", "SBCB", "ADDD", "ANDB", "BITB", "LDAB", "STAB", "EORB", "ADCB", "ORAB", "ADDB", "LDD ", "STD ", "LDX ", "STX ",
			"SUBB", "CMPB", "SBCB", "ADDD", "ANDB", "BITB", "LDAB", "STAB", "EORB", "ADCB", "ORAB", "ADDB", "LDD ", "STD ", "LDX ", "STX ",
		};

		public void Disassemble(int address) 
		{
			var op = this.FetchMemory(address);
			var opstr = this.Mnemonics[op];

			if ((op & 0xf0) == 0x20 || op == 0x8d) // relative
			{ 
				var dest = this.FetchMemory((address + 1) & 0xFFFF);
				dest = (dest & 0x80) != 0 ? dest | 0xFF00 : dest;
				dest = (address + 2 + dest) & 0xFFFF;
				//Console.WriteLine(StringTools.hex(address) + " " + opstr + "  " + StringTools.hex(dest));

			}
			else if ((op & 0xf0) == 0x60 || (op & 0xf0) == 0xa0 || (op & 0xf0) == 0xe0) // indexed
			{ 
				var offset = this.FetchMemory((address + 1) & 0xFFFF);
				//Console.WriteLine(StringTools.hex(address) + " " + opstr + "  " + StringTools.hex(offset) + ",X");

			}
			else if ((op & 0xf0) == 0x70 || (op & 0xf0) == 0xb0 || (op & 0xf0) == 0xf0)  // extended
			{
				var mem16 = (this.FetchMemory((address + 1) & 0xFFFF) << 8) + this.FetchMemory((address + 2) & 0xFFFF);
				//Console.WriteLine(StringTools.hex(address) + " " + opstr + "  " + StringTools.hex(mem16));

			}
			else if ((op & 0xf0) == 0x90 || (op & 0xf0) == 0xd0) // direct
			{ 
				var mem8 = this.FetchMemory((address + 1) & 0xFFFF);
				//Console.WriteLine(StringTools.hex(address) + " " + opstr + "  " + StringTools.hex(mem8));

			}
			else if ((op & 0xf0) == 0x80 || (op & 0xf0) == 0xc0)
			{
				var imm = this.FetchMemory((address + 1) & 0xFFFF);
				if ((op & 0xf) == 0x3 || (op & 0xf) > 0xb)
				{
					imm = (imm << 8) + this.FetchMemory((address + 2) & 0xFFFF);
				}
				//Console.WriteLine(StringTools.hex(address) + " " + opstr + " #" + StringTools.hex(imm));

			}
			else
			{
				//Console.WriteLine(StringTools.hex(address) + " " + opstr);

			}
		}
	}
}
